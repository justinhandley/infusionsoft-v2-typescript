/* tslint:disable */
/* eslint-disable */
/**
 * Keap REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.70.0.655384-hf-202403291416
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CountriesByCode } from '../models';
import { ProvincesByCode } from '../models';
import { RestDefaultOptionsResponse } from '../models';
/**
 * LocaleApi - axios parameter creator
 * @export
 */
export const LocaleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List dropdown default options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        defaultOptionsUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/locales/defaultOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCountriesUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/locales/countries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List a Country's Provinces
         * @param {string} countryCode countryCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCountriesUsingGET1: async (countryCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'countryCode' is not null or undefined
            if (countryCode === null || countryCode === undefined) {
                throw new RequiredError('countryCode','Required parameter countryCode was null or undefined when calling listCountriesUsingGET1.');
            }
            const localVarPath = `/v1/locales/countries/{countryCode}/provinces`
                .replace(`{${"countryCode"}}`, encodeURIComponent(String(countryCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocaleApi - functional programming interface
 * @export
 */
export const LocaleApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List dropdown default options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async defaultOptionsUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RestDefaultOptionsResponse>>> {
            const localVarAxiosArgs = await LocaleApiAxiosParamCreator(configuration).defaultOptionsUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List Countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCountriesUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountriesByCode>>> {
            const localVarAxiosArgs = await LocaleApiAxiosParamCreator(configuration).listCountriesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List a Country's Provinces
         * @param {string} countryCode countryCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCountriesUsingGET1(countryCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ProvincesByCode>>> {
            const localVarAxiosArgs = await LocaleApiAxiosParamCreator(configuration).listCountriesUsingGET1(countryCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LocaleApi - factory interface
 * @export
 */
export const LocaleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary List dropdown default options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async defaultOptionsUsingGET(options?: AxiosRequestConfig): Promise<AxiosResponse<RestDefaultOptionsResponse>> {
            return LocaleApiFp(configuration).defaultOptionsUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCountriesUsingGET(options?: AxiosRequestConfig): Promise<AxiosResponse<CountriesByCode>> {
            return LocaleApiFp(configuration).listCountriesUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List a Country's Provinces
         * @param {string} countryCode countryCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCountriesUsingGET1(countryCode: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ProvincesByCode>> {
            return LocaleApiFp(configuration).listCountriesUsingGET1(countryCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocaleApi - object-oriented interface
 * @export
 * @class LocaleApi
 * @extends {BaseAPI}
 */
export class LocaleApi extends BaseAPI {
    /**
     * 
     * @summary List dropdown default options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocaleApi
     */
    public async defaultOptionsUsingGET(options?: AxiosRequestConfig) : Promise<AxiosResponse<RestDefaultOptionsResponse>> {
        return LocaleApiFp(this.configuration).defaultOptionsUsingGET(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary List Countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocaleApi
     */
    public async listCountriesUsingGET(options?: AxiosRequestConfig) : Promise<AxiosResponse<CountriesByCode>> {
        return LocaleApiFp(this.configuration).listCountriesUsingGET(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary List a Country's Provinces
     * @param {string} countryCode countryCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocaleApi
     */
    public async listCountriesUsingGET1(countryCode: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ProvincesByCode>> {
        return LocaleApiFp(this.configuration).listCountriesUsingGET1(countryCode, options).then((request) => request(this.axios, this.basePath));
    }
}
