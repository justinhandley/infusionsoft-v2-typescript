/* tslint:disable */
/* eslint-disable */
/**
 * Keap REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.70.0.655384-hf-202403291416
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { FileInformation } from '../models';
import { FileList } from '../models';
import { FileUpload } from '../models';
/**
 * FileApi - axios parameter creator
 * @export
 */
export const FileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Upload a base64 encoded file. `contact_id` is required only when `file_association` is `CONTACT`.
         * @summary Upload File
         * @param {FileUpload} [body] fileUpload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFileUsingPOST: async (body?: FileUpload, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specified file
         * @summary Delete File
         * @param {number} fileId fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFileUsingDELETE: async (fileId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling deleteFileUsingDELETE.');
            }
            const localVarPath = `/v1/files/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves metadata about a specific file. Optionally returns the base64 encoded file data.
         * @summary Retrieve File
         * @param {number} fileId fileId
         * @param {Array<string>} [optionalProperties] Comma-delimited list of File properties to include in the response. (Some fields such as &#x60;file_data&#x60; aren&#x27;t included, by default.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileUsingGET: async (fileId: number, optionalProperties?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling getFileUsingGET.');
            }
            const localVarPath = `/v1/files/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (optionalProperties) {
                localVarQueryParameter['optional_properties'] = optionalProperties;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all files
         * @summary List Files
         * @param {number} [contactId] Filter based on Contact Id, if user has permission to see Contact files.
         * @param {number} [limit] Sets a total of items to return
         * @param {string} [name] Filter files based on name, with &#x27;*&#x27; preceding or following to indicate LIKE queries.
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [permission] Filter based on the permission of files (USER or COMPANY), defaults to BOTH.
         * @param {string} [type] Filter based on the type of file.
         * @param {string} [viewable] Include public or private files in response (PUBLIC or PRIVATE), defaults to BOTH.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFilesUsingGET: async (contactId?: number, limit?: number, name?: string, offset?: number, permission?: string, type?: string, viewable?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contactId !== undefined) {
                localVarQueryParameter['contact_id'] = contactId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (permission !== undefined) {
                localVarQueryParameter['permission'] = permission;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (viewable !== undefined) {
                localVarQueryParameter['viewable'] = viewable;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload a base64 encoded file to replace an existing one. `contact_id` is required only when `file_association` is `CONTACT`.
         * @summary Replace File
         * @param {number} fileId fileId
         * @param {FileUpload} [body] fileUpload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFileUsingPUT: async (fileId: number, body?: FileUpload, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling updateFileUsingPUT.');
            }
            const localVarPath = `/v1/files/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileApi - functional programming interface
 * @export
 */
export const FileApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Upload a base64 encoded file. `contact_id` is required only when `file_association` is `CONTACT`.
         * @summary Upload File
         * @param {FileUpload} [body] fileUpload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFileUsingPOST(body?: FileUpload, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FileInformation>>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).createFileUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes the specified file
         * @summary Delete File
         * @param {number} fileId fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFileUsingDELETE(fileId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).deleteFileUsingDELETE(fileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves metadata about a specific file. Optionally returns the base64 encoded file data.
         * @summary Retrieve File
         * @param {number} fileId fileId
         * @param {Array<string>} [optionalProperties] Comma-delimited list of File properties to include in the response. (Some fields such as &#x60;file_data&#x60; aren&#x27;t included, by default.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileUsingGET(fileId: number, optionalProperties?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FileInformation>>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).getFileUsingGET(fileId, optionalProperties, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of all files
         * @summary List Files
         * @param {number} [contactId] Filter based on Contact Id, if user has permission to see Contact files.
         * @param {number} [limit] Sets a total of items to return
         * @param {string} [name] Filter files based on name, with &#x27;*&#x27; preceding or following to indicate LIKE queries.
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [permission] Filter based on the permission of files (USER or COMPANY), defaults to BOTH.
         * @param {string} [type] Filter based on the type of file.
         * @param {string} [viewable] Include public or private files in response (PUBLIC or PRIVATE), defaults to BOTH.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFilesUsingGET(contactId?: number, limit?: number, name?: string, offset?: number, permission?: string, type?: string, viewable?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FileList>>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).listFilesUsingGET(contactId, limit, name, offset, permission, type, viewable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Upload a base64 encoded file to replace an existing one. `contact_id` is required only when `file_association` is `CONTACT`.
         * @summary Replace File
         * @param {number} fileId fileId
         * @param {FileUpload} [body] fileUpload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFileUsingPUT(fileId: number, body?: FileUpload, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FileInformation>>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).updateFileUsingPUT(fileId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FileApi - factory interface
 * @export
 */
export const FileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Upload a base64 encoded file. `contact_id` is required only when `file_association` is `CONTACT`.
         * @summary Upload File
         * @param {FileUpload} [body] fileUpload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFileUsingPOST(body?: FileUpload, options?: AxiosRequestConfig): Promise<AxiosResponse<FileInformation>> {
            return FileApiFp(configuration).createFileUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified file
         * @summary Delete File
         * @param {number} fileId fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFileUsingDELETE(fileId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FileApiFp(configuration).deleteFileUsingDELETE(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves metadata about a specific file. Optionally returns the base64 encoded file data.
         * @summary Retrieve File
         * @param {number} fileId fileId
         * @param {Array<string>} [optionalProperties] Comma-delimited list of File properties to include in the response. (Some fields such as &#x60;file_data&#x60; aren&#x27;t included, by default.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileUsingGET(fileId: number, optionalProperties?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<FileInformation>> {
            return FileApiFp(configuration).getFileUsingGET(fileId, optionalProperties, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all files
         * @summary List Files
         * @param {number} [contactId] Filter based on Contact Id, if user has permission to see Contact files.
         * @param {number} [limit] Sets a total of items to return
         * @param {string} [name] Filter files based on name, with &#x27;*&#x27; preceding or following to indicate LIKE queries.
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [permission] Filter based on the permission of files (USER or COMPANY), defaults to BOTH.
         * @param {string} [type] Filter based on the type of file.
         * @param {string} [viewable] Include public or private files in response (PUBLIC or PRIVATE), defaults to BOTH.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFilesUsingGET(contactId?: number, limit?: number, name?: string, offset?: number, permission?: string, type?: string, viewable?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<FileList>> {
            return FileApiFp(configuration).listFilesUsingGET(contactId, limit, name, offset, permission, type, viewable, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload a base64 encoded file to replace an existing one. `contact_id` is required only when `file_association` is `CONTACT`.
         * @summary Replace File
         * @param {number} fileId fileId
         * @param {FileUpload} [body] fileUpload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFileUsingPUT(fileId: number, body?: FileUpload, options?: AxiosRequestConfig): Promise<AxiosResponse<FileInformation>> {
            return FileApiFp(configuration).updateFileUsingPUT(fileId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export class FileApi extends BaseAPI {
    /**
     * Upload a base64 encoded file. `contact_id` is required only when `file_association` is `CONTACT`.
     * @summary Upload File
     * @param {FileUpload} [body] fileUpload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public async createFileUsingPOST(body?: FileUpload, options?: AxiosRequestConfig) : Promise<AxiosResponse<FileInformation>> {
        return FileApiFp(this.configuration).createFileUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes the specified file
     * @summary Delete File
     * @param {number} fileId fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public async deleteFileUsingDELETE(fileId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FileApiFp(this.configuration).deleteFileUsingDELETE(fileId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves metadata about a specific file. Optionally returns the base64 encoded file data.
     * @summary Retrieve File
     * @param {number} fileId fileId
     * @param {Array<string>} [optionalProperties] Comma-delimited list of File properties to include in the response. (Some fields such as &#x60;file_data&#x60; aren&#x27;t included, by default.)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public async getFileUsingGET(fileId: number, optionalProperties?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<FileInformation>> {
        return FileApiFp(this.configuration).getFileUsingGET(fileId, optionalProperties, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of all files
     * @summary List Files
     * @param {number} [contactId] Filter based on Contact Id, if user has permission to see Contact files.
     * @param {number} [limit] Sets a total of items to return
     * @param {string} [name] Filter files based on name, with &#x27;*&#x27; preceding or following to indicate LIKE queries.
     * @param {number} [offset] Sets a beginning range of items to return
     * @param {string} [permission] Filter based on the permission of files (USER or COMPANY), defaults to BOTH.
     * @param {string} [type] Filter based on the type of file.
     * @param {string} [viewable] Include public or private files in response (PUBLIC or PRIVATE), defaults to BOTH.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public async listFilesUsingGET(contactId?: number, limit?: number, name?: string, offset?: number, permission?: string, type?: string, viewable?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<FileList>> {
        return FileApiFp(this.configuration).listFilesUsingGET(contactId, limit, name, offset, permission, type, viewable, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Upload a base64 encoded file to replace an existing one. `contact_id` is required only when `file_association` is `CONTACT`.
     * @summary Replace File
     * @param {number} fileId fileId
     * @param {FileUpload} [body] fileUpload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public async updateFileUsingPUT(fileId: number, body?: FileUpload, options?: AxiosRequestConfig) : Promise<AxiosResponse<FileInformation>> {
        return FileApiFp(this.configuration).updateFileUsingPUT(fileId, body, options).then((request) => request(this.axios, this.basePath));
    }
}
