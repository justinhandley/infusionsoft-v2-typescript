/* tslint:disable */
/* eslint-disable */
/**
 * Keap REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.70.0.655384-hf-202403291416
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Appointment } from '../models';
import { AppointmentList } from '../models';
import { CreateRestCustomField } from '../models';
import { CustomFieldMetaData } from '../models';
import { ObjectModel } from '../models';
/**
 * AppointmentApi - axios parameter creator
 * @export
 */
export const AppointmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a custom field of the specified type and options to the Appointment object.
         * @summary Create a Custom Field
         * @param {CreateRestCustomField} body customField
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointmentCustomFieldUsingPOST: async (body: CreateRestCustomField, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createAppointmentCustomFieldUsingPOST.');
            }
            const localVarPath = `/v1/appointments/model/customFields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new appointment as the authenticated user
         * @summary Create an Appointment
         * @param {Appointment} body appointment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointmentUsingPOST: async (body: Appointment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createAppointmentUsingPOST.');
            }
            const localVarPath = `/v1/appointments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specified appointment
         * @summary Delete an Appointment
         * @param {number} appointmentId appointmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppointmentUsingDELETE: async (appointmentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appointmentId' is not null or undefined
            if (appointmentId === null || appointmentId === undefined) {
                throw new RequiredError('appointmentId','Required parameter appointmentId was null or undefined when calling deleteAppointmentUsingDELETE.');
            }
            const localVarPath = `/v1/appointments/{appointmentId}`
                .replace(`{${"appointmentId"}}`, encodeURIComponent(String(appointmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a specific appointment with respect to user permissions. The authenticated user will need the \"can view all records\" permission for Task/Appt/Notes
         * @summary Retrieve an Appointment
         * @param {number} appointmentId appointmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointmentUsingGET: async (appointmentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appointmentId' is not null or undefined
            if (appointmentId === null || appointmentId === undefined) {
                throw new RequiredError('appointmentId','Required parameter appointmentId was null or undefined when calling getAppointmentUsingGET.');
            }
            const localVarPath = `/v1/appointments/{appointmentId}`
                .replace(`{${"appointmentId"}}`, encodeURIComponent(String(appointmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all appointments for the authenticated user
         * @summary List Appointments
         * @param {number} [contactId] Optionally find appointments with a contact
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppointmentsUsingGET: async (contactId?: number, limit?: number, offset?: number, since?: string, until?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/appointments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contactId !== undefined) {
                localVarQueryParameter['contact_id'] = contactId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the custom fields for the Appointment object
         * @summary Retrieve Appointment Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAppointmentModelUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/appointments/model`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces all values of a given appointment
         * @summary Replace an Appointment
         * @param {Appointment} body appointmentDTO
         * @param {number} appointmentId appointmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAppointmentUsingPUT: async (body: Appointment, appointmentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAppointmentUsingPUT.');
            }
            // verify required parameter 'appointmentId' is not null or undefined
            if (appointmentId === null || appointmentId === undefined) {
                throw new RequiredError('appointmentId','Required parameter appointmentId was null or undefined when calling updateAppointmentUsingPUT.');
            }
            const localVarPath = `/v1/appointments/{appointmentId}`
                .replace(`{${"appointmentId"}}`, encodeURIComponent(String(appointmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the provided values of a given appointment
         * @summary Update an Appointment
         * @param {Appointment} body appointmentDTO
         * @param {number} appointmentId appointmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePropertiesOnAppointmentUsingPATCH: async (body: Appointment, appointmentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updatePropertiesOnAppointmentUsingPATCH.');
            }
            // verify required parameter 'appointmentId' is not null or undefined
            if (appointmentId === null || appointmentId === undefined) {
                throw new RequiredError('appointmentId','Required parameter appointmentId was null or undefined when calling updatePropertiesOnAppointmentUsingPATCH.');
            }
            const localVarPath = `/v1/appointments/{appointmentId}`
                .replace(`{${"appointmentId"}}`, encodeURIComponent(String(appointmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppointmentApi - functional programming interface
 * @export
 */
export const AppointmentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Adds a custom field of the specified type and options to the Appointment object.
         * @summary Create a Custom Field
         * @param {CreateRestCustomField} body customField
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAppointmentCustomFieldUsingPOST(body: CreateRestCustomField, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomFieldMetaData>>> {
            const localVarAxiosArgs = await AppointmentApiAxiosParamCreator(configuration).createAppointmentCustomFieldUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new appointment as the authenticated user
         * @summary Create an Appointment
         * @param {Appointment} body appointment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAppointmentUsingPOST(body: Appointment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Appointment>>> {
            const localVarAxiosArgs = await AppointmentApiAxiosParamCreator(configuration).createAppointmentUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes the specified appointment
         * @summary Delete an Appointment
         * @param {number} appointmentId appointmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAppointmentUsingDELETE(appointmentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AppointmentApiAxiosParamCreator(configuration).deleteAppointmentUsingDELETE(appointmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a specific appointment with respect to user permissions. The authenticated user will need the \"can view all records\" permission for Task/Appt/Notes
         * @summary Retrieve an Appointment
         * @param {number} appointmentId appointmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppointmentUsingGET(appointmentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Appointment>>> {
            const localVarAxiosArgs = await AppointmentApiAxiosParamCreator(configuration).getAppointmentUsingGET(appointmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves all appointments for the authenticated user
         * @summary List Appointments
         * @param {number} [contactId] Optionally find appointments with a contact
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAppointmentsUsingGET(contactId?: number, limit?: number, offset?: number, since?: string, until?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AppointmentList>>> {
            const localVarAxiosArgs = await AppointmentApiAxiosParamCreator(configuration).listAppointmentsUsingGET(contactId, limit, offset, since, until, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the custom fields for the Appointment object
         * @summary Retrieve Appointment Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAppointmentModelUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ObjectModel>>> {
            const localVarAxiosArgs = await AppointmentApiAxiosParamCreator(configuration).retrieveAppointmentModelUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces all values of a given appointment
         * @summary Replace an Appointment
         * @param {Appointment} body appointmentDTO
         * @param {number} appointmentId appointmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAppointmentUsingPUT(body: Appointment, appointmentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Appointment>>> {
            const localVarAxiosArgs = await AppointmentApiAxiosParamCreator(configuration).updateAppointmentUsingPUT(body, appointmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates the provided values of a given appointment
         * @summary Update an Appointment
         * @param {Appointment} body appointmentDTO
         * @param {number} appointmentId appointmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePropertiesOnAppointmentUsingPATCH(body: Appointment, appointmentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Appointment>>> {
            const localVarAxiosArgs = await AppointmentApiAxiosParamCreator(configuration).updatePropertiesOnAppointmentUsingPATCH(body, appointmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AppointmentApi - factory interface
 * @export
 */
export const AppointmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Adds a custom field of the specified type and options to the Appointment object.
         * @summary Create a Custom Field
         * @param {CreateRestCustomField} body customField
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAppointmentCustomFieldUsingPOST(body: CreateRestCustomField, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomFieldMetaData>> {
            return AppointmentApiFp(configuration).createAppointmentCustomFieldUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new appointment as the authenticated user
         * @summary Create an Appointment
         * @param {Appointment} body appointment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAppointmentUsingPOST(body: Appointment, options?: AxiosRequestConfig): Promise<AxiosResponse<Appointment>> {
            return AppointmentApiFp(configuration).createAppointmentUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified appointment
         * @summary Delete an Appointment
         * @param {number} appointmentId appointmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAppointmentUsingDELETE(appointmentId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AppointmentApiFp(configuration).deleteAppointmentUsingDELETE(appointmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a specific appointment with respect to user permissions. The authenticated user will need the \"can view all records\" permission for Task/Appt/Notes
         * @summary Retrieve an Appointment
         * @param {number} appointmentId appointmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppointmentUsingGET(appointmentId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Appointment>> {
            return AppointmentApiFp(configuration).getAppointmentUsingGET(appointmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all appointments for the authenticated user
         * @summary List Appointments
         * @param {number} [contactId] Optionally find appointments with a contact
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAppointmentsUsingGET(contactId?: number, limit?: number, offset?: number, since?: string, until?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AppointmentList>> {
            return AppointmentApiFp(configuration).listAppointmentsUsingGET(contactId, limit, offset, since, until, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the custom fields for the Appointment object
         * @summary Retrieve Appointment Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAppointmentModelUsingGET(options?: AxiosRequestConfig): Promise<AxiosResponse<ObjectModel>> {
            return AppointmentApiFp(configuration).retrieveAppointmentModelUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces all values of a given appointment
         * @summary Replace an Appointment
         * @param {Appointment} body appointmentDTO
         * @param {number} appointmentId appointmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAppointmentUsingPUT(body: Appointment, appointmentId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Appointment>> {
            return AppointmentApiFp(configuration).updateAppointmentUsingPUT(body, appointmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the provided values of a given appointment
         * @summary Update an Appointment
         * @param {Appointment} body appointmentDTO
         * @param {number} appointmentId appointmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePropertiesOnAppointmentUsingPATCH(body: Appointment, appointmentId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Appointment>> {
            return AppointmentApiFp(configuration).updatePropertiesOnAppointmentUsingPATCH(body, appointmentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppointmentApi - object-oriented interface
 * @export
 * @class AppointmentApi
 * @extends {BaseAPI}
 */
export class AppointmentApi extends BaseAPI {
    /**
     * Adds a custom field of the specified type and options to the Appointment object.
     * @summary Create a Custom Field
     * @param {CreateRestCustomField} body customField
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    public async createAppointmentCustomFieldUsingPOST(body: CreateRestCustomField, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomFieldMetaData>> {
        return AppointmentApiFp(this.configuration).createAppointmentCustomFieldUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new appointment as the authenticated user
     * @summary Create an Appointment
     * @param {Appointment} body appointment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    public async createAppointmentUsingPOST(body: Appointment, options?: AxiosRequestConfig) : Promise<AxiosResponse<Appointment>> {
        return AppointmentApiFp(this.configuration).createAppointmentUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes the specified appointment
     * @summary Delete an Appointment
     * @param {number} appointmentId appointmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    public async deleteAppointmentUsingDELETE(appointmentId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AppointmentApiFp(this.configuration).deleteAppointmentUsingDELETE(appointmentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a specific appointment with respect to user permissions. The authenticated user will need the \"can view all records\" permission for Task/Appt/Notes
     * @summary Retrieve an Appointment
     * @param {number} appointmentId appointmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    public async getAppointmentUsingGET(appointmentId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Appointment>> {
        return AppointmentApiFp(this.configuration).getAppointmentUsingGET(appointmentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves all appointments for the authenticated user
     * @summary List Appointments
     * @param {number} [contactId] Optionally find appointments with a contact
     * @param {number} [limit] Sets a total of items to return
     * @param {number} [offset] Sets a beginning range of items to return
     * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
     * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    public async listAppointmentsUsingGET(contactId?: number, limit?: number, offset?: number, since?: string, until?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AppointmentList>> {
        return AppointmentApiFp(this.configuration).listAppointmentsUsingGET(contactId, limit, offset, since, until, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the custom fields for the Appointment object
     * @summary Retrieve Appointment Model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    public async retrieveAppointmentModelUsingGET(options?: AxiosRequestConfig) : Promise<AxiosResponse<ObjectModel>> {
        return AppointmentApiFp(this.configuration).retrieveAppointmentModelUsingGET(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replaces all values of a given appointment
     * @summary Replace an Appointment
     * @param {Appointment} body appointmentDTO
     * @param {number} appointmentId appointmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    public async updateAppointmentUsingPUT(body: Appointment, appointmentId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Appointment>> {
        return AppointmentApiFp(this.configuration).updateAppointmentUsingPUT(body, appointmentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the provided values of a given appointment
     * @summary Update an Appointment
     * @param {Appointment} body appointmentDTO
     * @param {number} appointmentId appointmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    public async updatePropertiesOnAppointmentUsingPATCH(body: Appointment, appointmentId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Appointment>> {
        return AppointmentApiFp(this.configuration).updatePropertiesOnAppointmentUsingPATCH(body, appointmentId, options).then((request) => request(this.axios, this.basePath));
    }
}
