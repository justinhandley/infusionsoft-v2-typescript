/* tslint:disable */
/* eslint-disable */
/**
 * Keap REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.70.0.655384-hf-202403291416
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateRestCustomField } from '../models';
import { CustomFieldMetaData } from '../models';
import { Note } from '../models';
import { NoteList } from '../models';
import { ObjectModel } from '../models';
import { RequestNote } from '../models';
import { UpdateNote } from '../models';
/**
 * NoteApi - axios parameter creator
 * @export
 */
export const NoteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a custom field of the specified type and options to the Note object.
         * @summary Create a Custom Field
         * @param {CreateRestCustomField} body customField
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNoteCustomFieldUsingPOST: async (body: CreateRestCustomField, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createNoteCustomFieldUsingPOST.');
            }
            const localVarPath = `/v1/notes/model/customFields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new note as the authenticated user. Either a \"title\" or \"body\" is required
         * @summary Create a Note
         * @param {RequestNote} body createNote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNoteUsingPOST: async (body: RequestNote, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createNoteUsingPOST.');
            }
            const localVarPath = `/v1/notes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a note
         * @summary Delete a Note
         * @param {number} noteId noteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNoteUsingDELETE: async (noteId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling deleteNoteUsingDELETE.');
            }
            const localVarPath = `/v1/notes/{noteId}`
                .replace(`{${"noteId"}}`, encodeURIComponent(String(noteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single note
         * @summary Retrieve a Note
         * @param {number} noteId noteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteUsingGET: async (noteId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling getNoteUsingGET.');
            }
            const localVarPath = `/v1/notes/{noteId}`
                .replace(`{${"noteId"}}`, encodeURIComponent(String(noteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all notes
         * @summary List Notes
         * @param {number} [contactId] Filter based on the contact id assigned to the note.
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {number} [userId] Filter based on the user id assigned to the note.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNotesUsingGET: async (contactId?: number, limit?: number, offset?: number, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/notes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contactId !== undefined) {
                localVarQueryParameter['contact_id'] = contactId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the custom fields for the Note object
         * @summary Retrieve Note Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveNoteModelUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/notes/model`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces all values of a given note
         * @summary Replace a Note
         * @param {RequestNote} body requestNote
         * @param {number} note note
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNoteUsingPUT: async (body: RequestNote, note: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateNoteUsingPUT.');
            }
            // verify required parameter 'note' is not null or undefined
            if (note === null || note === undefined) {
                throw new RequiredError('note','Required parameter note was null or undefined when calling updateNoteUsingPUT.');
            }
            const localVarPath = `/v1/notes/{noteId}`
                .replace(`{${"note"}}`, encodeURIComponent(String(note)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a note with only the values provided in the request
         * @summary Update a Note
         * @param {number} noteId noteId
         * @param {UpdateNote} [body] note
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePropertiesOnNoteUsingPATCH: async (noteId: number, body?: UpdateNote, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling updatePropertiesOnNoteUsingPATCH.');
            }
            const localVarPath = `/v1/notes/{noteId}`
                .replace(`{${"noteId"}}`, encodeURIComponent(String(noteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NoteApi - functional programming interface
 * @export
 */
export const NoteApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Adds a custom field of the specified type and options to the Note object.
         * @summary Create a Custom Field
         * @param {CreateRestCustomField} body customField
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNoteCustomFieldUsingPOST(body: CreateRestCustomField, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomFieldMetaData>>> {
            const localVarAxiosArgs = await NoteApiAxiosParamCreator(configuration).createNoteCustomFieldUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new note as the authenticated user. Either a \"title\" or \"body\" is required
         * @summary Create a Note
         * @param {RequestNote} body createNote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNoteUsingPOST(body: RequestNote, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Note>>> {
            const localVarAxiosArgs = await NoteApiAxiosParamCreator(configuration).createNoteUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a note
         * @summary Delete a Note
         * @param {number} noteId noteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNoteUsingDELETE(noteId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await NoteApiAxiosParamCreator(configuration).deleteNoteUsingDELETE(noteId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a single note
         * @summary Retrieve a Note
         * @param {number} noteId noteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteUsingGET(noteId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Note>>> {
            const localVarAxiosArgs = await NoteApiAxiosParamCreator(configuration).getNoteUsingGET(noteId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of all notes
         * @summary List Notes
         * @param {number} [contactId] Filter based on the contact id assigned to the note.
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {number} [userId] Filter based on the user id assigned to the note.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNotesUsingGET(contactId?: number, limit?: number, offset?: number, userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<NoteList>>> {
            const localVarAxiosArgs = await NoteApiAxiosParamCreator(configuration).listNotesUsingGET(contactId, limit, offset, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the custom fields for the Note object
         * @summary Retrieve Note Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveNoteModelUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ObjectModel>>> {
            const localVarAxiosArgs = await NoteApiAxiosParamCreator(configuration).retrieveNoteModelUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces all values of a given note
         * @summary Replace a Note
         * @param {RequestNote} body requestNote
         * @param {number} note note
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNoteUsingPUT(body: RequestNote, note: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Note>>> {
            const localVarAxiosArgs = await NoteApiAxiosParamCreator(configuration).updateNoteUsingPUT(body, note, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a note with only the values provided in the request
         * @summary Update a Note
         * @param {number} noteId noteId
         * @param {UpdateNote} [body] note
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePropertiesOnNoteUsingPATCH(noteId: number, body?: UpdateNote, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Note>>> {
            const localVarAxiosArgs = await NoteApiAxiosParamCreator(configuration).updatePropertiesOnNoteUsingPATCH(noteId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NoteApi - factory interface
 * @export
 */
export const NoteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Adds a custom field of the specified type and options to the Note object.
         * @summary Create a Custom Field
         * @param {CreateRestCustomField} body customField
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNoteCustomFieldUsingPOST(body: CreateRestCustomField, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomFieldMetaData>> {
            return NoteApiFp(configuration).createNoteCustomFieldUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new note as the authenticated user. Either a \"title\" or \"body\" is required
         * @summary Create a Note
         * @param {RequestNote} body createNote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNoteUsingPOST(body: RequestNote, options?: AxiosRequestConfig): Promise<AxiosResponse<Note>> {
            return NoteApiFp(configuration).createNoteUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a note
         * @summary Delete a Note
         * @param {number} noteId noteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNoteUsingDELETE(noteId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return NoteApiFp(configuration).deleteNoteUsingDELETE(noteId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single note
         * @summary Retrieve a Note
         * @param {number} noteId noteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteUsingGET(noteId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Note>> {
            return NoteApiFp(configuration).getNoteUsingGET(noteId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all notes
         * @summary List Notes
         * @param {number} [contactId] Filter based on the contact id assigned to the note.
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {number} [userId] Filter based on the user id assigned to the note.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNotesUsingGET(contactId?: number, limit?: number, offset?: number, userId?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<NoteList>> {
            return NoteApiFp(configuration).listNotesUsingGET(contactId, limit, offset, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the custom fields for the Note object
         * @summary Retrieve Note Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveNoteModelUsingGET(options?: AxiosRequestConfig): Promise<AxiosResponse<ObjectModel>> {
            return NoteApiFp(configuration).retrieveNoteModelUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces all values of a given note
         * @summary Replace a Note
         * @param {RequestNote} body requestNote
         * @param {number} note note
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNoteUsingPUT(body: RequestNote, note: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Note>> {
            return NoteApiFp(configuration).updateNoteUsingPUT(body, note, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a note with only the values provided in the request
         * @summary Update a Note
         * @param {number} noteId noteId
         * @param {UpdateNote} [body] note
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePropertiesOnNoteUsingPATCH(noteId: number, body?: UpdateNote, options?: AxiosRequestConfig): Promise<AxiosResponse<Note>> {
            return NoteApiFp(configuration).updatePropertiesOnNoteUsingPATCH(noteId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NoteApi - object-oriented interface
 * @export
 * @class NoteApi
 * @extends {BaseAPI}
 */
export class NoteApi extends BaseAPI {
    /**
     * Adds a custom field of the specified type and options to the Note object.
     * @summary Create a Custom Field
     * @param {CreateRestCustomField} body customField
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApi
     */
    public async createNoteCustomFieldUsingPOST(body: CreateRestCustomField, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomFieldMetaData>> {
        return NoteApiFp(this.configuration).createNoteCustomFieldUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new note as the authenticated user. Either a \"title\" or \"body\" is required
     * @summary Create a Note
     * @param {RequestNote} body createNote
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApi
     */
    public async createNoteUsingPOST(body: RequestNote, options?: AxiosRequestConfig) : Promise<AxiosResponse<Note>> {
        return NoteApiFp(this.configuration).createNoteUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a note
     * @summary Delete a Note
     * @param {number} noteId noteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApi
     */
    public async deleteNoteUsingDELETE(noteId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return NoteApiFp(this.configuration).deleteNoteUsingDELETE(noteId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a single note
     * @summary Retrieve a Note
     * @param {number} noteId noteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApi
     */
    public async getNoteUsingGET(noteId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Note>> {
        return NoteApiFp(this.configuration).getNoteUsingGET(noteId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of all notes
     * @summary List Notes
     * @param {number} [contactId] Filter based on the contact id assigned to the note.
     * @param {number} [limit] Sets a total of items to return
     * @param {number} [offset] Sets a beginning range of items to return
     * @param {number} [userId] Filter based on the user id assigned to the note.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApi
     */
    public async listNotesUsingGET(contactId?: number, limit?: number, offset?: number, userId?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<NoteList>> {
        return NoteApiFp(this.configuration).listNotesUsingGET(contactId, limit, offset, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the custom fields for the Note object
     * @summary Retrieve Note Model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApi
     */
    public async retrieveNoteModelUsingGET(options?: AxiosRequestConfig) : Promise<AxiosResponse<ObjectModel>> {
        return NoteApiFp(this.configuration).retrieveNoteModelUsingGET(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replaces all values of a given note
     * @summary Replace a Note
     * @param {RequestNote} body requestNote
     * @param {number} note note
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApi
     */
    public async updateNoteUsingPUT(body: RequestNote, note: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Note>> {
        return NoteApiFp(this.configuration).updateNoteUsingPUT(body, note, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a note with only the values provided in the request
     * @summary Update a Note
     * @param {number} noteId noteId
     * @param {UpdateNote} [body] note
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApi
     */
    public async updatePropertiesOnNoteUsingPATCH(noteId: number, body?: UpdateNote, options?: AxiosRequestConfig) : Promise<AxiosResponse<Note>> {
        return NoteApiFp(this.configuration).updatePropertiesOnNoteUsingPATCH(noteId, body, options).then((request) => request(this.axios, this.basePath));
    }
}
