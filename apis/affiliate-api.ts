/* tslint:disable */
/* eslint-disable */
/**
 * Keap REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.70.0.655384-hf-202403291416
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Affiliate } from '../models';
import { AffiliateClawbackList } from '../models';
import { AffiliateCommissionList } from '../models';
import { AffiliateList } from '../models';
import { AffiliatePaymentList } from '../models';
import { AffiliateProgramList } from '../models';
import { AffiliateSummaryList } from '../models';
import { CreateAffiliate } from '../models';
import { ObjectModel } from '../models';
import { RedirectList } from '../models';
/**
 * AffiliateApi - axios parameter creator
 * @export
 */
export const AffiliateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a single affiliate
         * @summary Create an affiliate
         * @param {CreateAffiliate} [body] affiliate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAffiliateUsingPOST: async (body?: CreateAffiliate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/affiliates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a single affiliate
         * @summary Retrieve an affiliate
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffiliateUsingGET: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAffiliateUsingGET.');
            }
            const localVarPath = `/v1/affiliates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all affiliate clawbacks
         * @summary List Affiliate clawbacks
         * @param {string} affiliateId affiliateId
         * @param {number} [limit] Sets a beginning range of items to return
         * @param {number} [offset] Count to offset the returned results by
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {string} [since] Optional inclusive start date
         * @param {string} [until] Optional inclusive end date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAffiliateClawbacksUsingGET: async (affiliateId: string, limit?: number, offset?: number, order?: string, orderDirection?: string, since?: string, until?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'affiliateId' is not null or undefined
            if (affiliateId === null || affiliateId === undefined) {
                throw new RequiredError('affiliateId','Required parameter affiliateId was null or undefined when calling listAffiliateClawbacksUsingGET.');
            }
            const localVarPath = `/v1/affiliates/{affiliateId}/clawbacks`
                .replace(`{${"affiliateId"}}`, encodeURIComponent(String(affiliateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (orderDirection !== undefined) {
                localVarQueryParameter['order_direction'] = orderDirection;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all affiliate redirects
         * @summary List Affiliate Redirects
         * @param {string} [affiliateId] Affiliate ID to search by
         * @param {number} [limit] Sets a beginning range of items to return
         * @param {number} [offset] Count to offset the returned results by
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAffiliateRedirectLinksUsingGET: async (affiliateId?: string, limit?: number, offset?: number, order?: string, orderDirection?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/affiliates/redirectlinks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (affiliateId !== undefined) {
                localVarQueryParameter['affiliate_id'] = affiliateId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (orderDirection !== undefined) {
                localVarQueryParameter['order_direction'] = orderDirection;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all affiliates
         * @summary List Affiliates
         * @param {string} [code] Optional affiliate parent ID to query on
         * @param {string} [contactId] Optional contact ID to query on
         * @param {number} [limit] Sets a beginning range of items to return
         * @param {string} [name] Optional affiliate name to query on
         * @param {number} [offset] Count to offset the returned results by
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {string} [parentId] Optional affiliate code to query on
         * @param {string} [programId] Optional affiliate program ID to query on
         * @param {string} [status] Optional affiliate status to query on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAffiliatesUsingGET: async (code?: string, contactId?: string, limit?: number, name?: string, offset?: number, order?: string, orderDirection?: string, parentId?: string, programId?: string, status?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/affiliates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (contactId !== undefined) {
                localVarQueryParameter['contact_id'] = contactId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (orderDirection !== undefined) {
                localVarQueryParameter['order_direction'] = orderDirection;
            }

            if (parentId !== undefined) {
                localVarQueryParameter['parent_id'] = parentId;
            }

            if (programId !== undefined) {
                localVarQueryParameter['program_id'] = programId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of Commissions based on Affiliate or Date Range
         * @summary List Commissions
         * @param {number} [affiliateId] Affiliate to retrieve commissions for
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCommissionsUsingGET: async (affiliateId?: number, limit?: number, offset?: number, order?: string, orderDirection?: string, since?: string, until?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/affiliates/commissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (affiliateId !== undefined) {
                localVarQueryParameter['affiliateId'] = affiliateId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (orderDirection !== undefined) {
                localVarQueryParameter['order_direction'] = orderDirection;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all affiliate payments
         * @summary List Affiliate payments
         * @param {number} affiliateId affiliateId
         * @param {number} [limit] Sets a beginning range of items to return
         * @param {number} [offset] Count to offset the returned results by
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {string} [since] Inclusive start date
         * @param {string} [until] Inclusive end date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaymentsUsingGET: async (affiliateId: number, limit?: number, offset?: number, order?: string, orderDirection?: string, since?: string, until?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'affiliateId' is not null or undefined
            if (affiliateId === null || affiliateId === undefined) {
                throw new RequiredError('affiliateId','Required parameter affiliateId was null or undefined when calling listPaymentsUsingGET.');
            }
            const localVarPath = `/v1/affiliates/{affiliateId}/payments`
                .replace(`{${"affiliateId"}}`, encodeURIComponent(String(affiliateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (orderDirection !== undefined) {
                localVarQueryParameter['order_direction'] = orderDirection;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of Commission Programs
         * @summary List Commission Programs
         * @param {number} [affiliateId] Id of the affiliate you would like programs for
         * @param {number} [limit] Sets a beginning range of items to return
         * @param {number} [offset] Count to offset the returned results by
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProgramsUsingGET: async (affiliateId?: number, limit?: number, offset?: number, order?: string, orderDirection?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/affiliates/programs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (affiliateId !== undefined) {
                localVarQueryParameter['affiliate_id'] = affiliateId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (orderDirection !== undefined) {
                localVarQueryParameter['order_direction'] = orderDirection;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of affiliate summaries
         * @summary List affiliate summaries
         * @param {Array<number>} [affiliateIds] Ids of the affiliates you would like a summary for
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSummariesUsingGET: async (affiliateIds?: Array<number>, order?: string, orderDirection?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/affiliates/summaries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (affiliateIds) {
                localVarQueryParameter['affiliate_ids'] = affiliateIds;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (orderDirection !== undefined) {
                localVarQueryParameter['order_direction'] = orderDirection;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the custom fields for the Affiliate object
         * @summary Retrieve Affiliate Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAffiliateModelUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/affiliates/model`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AffiliateApi - functional programming interface
 * @export
 */
export const AffiliateApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a single affiliate
         * @summary Create an affiliate
         * @param {CreateAffiliate} [body] affiliate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAffiliateUsingPOST(body?: CreateAffiliate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Affiliate>>> {
            const localVarAxiosArgs = await AffiliateApiAxiosParamCreator(configuration).createAffiliateUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a single affiliate
         * @summary Retrieve an affiliate
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAffiliateUsingGET(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Affiliate>>> {
            const localVarAxiosArgs = await AffiliateApiAxiosParamCreator(configuration).getAffiliateUsingGET(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of all affiliate clawbacks
         * @summary List Affiliate clawbacks
         * @param {string} affiliateId affiliateId
         * @param {number} [limit] Sets a beginning range of items to return
         * @param {number} [offset] Count to offset the returned results by
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {string} [since] Optional inclusive start date
         * @param {string} [until] Optional inclusive end date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAffiliateClawbacksUsingGET(affiliateId: string, limit?: number, offset?: number, order?: string, orderDirection?: string, since?: string, until?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AffiliateClawbackList>>> {
            const localVarAxiosArgs = await AffiliateApiAxiosParamCreator(configuration).listAffiliateClawbacksUsingGET(affiliateId, limit, offset, order, orderDirection, since, until, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of all affiliate redirects
         * @summary List Affiliate Redirects
         * @param {string} [affiliateId] Affiliate ID to search by
         * @param {number} [limit] Sets a beginning range of items to return
         * @param {number} [offset] Count to offset the returned results by
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAffiliateRedirectLinksUsingGET(affiliateId?: string, limit?: number, offset?: number, order?: string, orderDirection?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RedirectList>>> {
            const localVarAxiosArgs = await AffiliateApiAxiosParamCreator(configuration).listAffiliateRedirectLinksUsingGET(affiliateId, limit, offset, order, orderDirection, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of all affiliates
         * @summary List Affiliates
         * @param {string} [code] Optional affiliate parent ID to query on
         * @param {string} [contactId] Optional contact ID to query on
         * @param {number} [limit] Sets a beginning range of items to return
         * @param {string} [name] Optional affiliate name to query on
         * @param {number} [offset] Count to offset the returned results by
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {string} [parentId] Optional affiliate code to query on
         * @param {string} [programId] Optional affiliate program ID to query on
         * @param {string} [status] Optional affiliate status to query on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAffiliatesUsingGET(code?: string, contactId?: string, limit?: number, name?: string, offset?: number, order?: string, orderDirection?: string, parentId?: string, programId?: string, status?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AffiliateList>>> {
            const localVarAxiosArgs = await AffiliateApiAxiosParamCreator(configuration).listAffiliatesUsingGET(code, contactId, limit, name, offset, order, orderDirection, parentId, programId, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a list of Commissions based on Affiliate or Date Range
         * @summary List Commissions
         * @param {number} [affiliateId] Affiliate to retrieve commissions for
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCommissionsUsingGET(affiliateId?: number, limit?: number, offset?: number, order?: string, orderDirection?: string, since?: string, until?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AffiliateCommissionList>>> {
            const localVarAxiosArgs = await AffiliateApiAxiosParamCreator(configuration).listCommissionsUsingGET(affiliateId, limit, offset, order, orderDirection, since, until, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of all affiliate payments
         * @summary List Affiliate payments
         * @param {number} affiliateId affiliateId
         * @param {number} [limit] Sets a beginning range of items to return
         * @param {number} [offset] Count to offset the returned results by
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {string} [since] Inclusive start date
         * @param {string} [until] Inclusive end date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPaymentsUsingGET(affiliateId: number, limit?: number, offset?: number, order?: string, orderDirection?: string, since?: string, until?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AffiliatePaymentList>>> {
            const localVarAxiosArgs = await AffiliateApiAxiosParamCreator(configuration).listPaymentsUsingGET(affiliateId, limit, offset, order, orderDirection, since, until, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a list of Commission Programs
         * @summary List Commission Programs
         * @param {number} [affiliateId] Id of the affiliate you would like programs for
         * @param {number} [limit] Sets a beginning range of items to return
         * @param {number} [offset] Count to offset the returned results by
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProgramsUsingGET(affiliateId?: number, limit?: number, offset?: number, order?: string, orderDirection?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AffiliateProgramList>>> {
            const localVarAxiosArgs = await AffiliateApiAxiosParamCreator(configuration).listProgramsUsingGET(affiliateId, limit, offset, order, orderDirection, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a list of affiliate summaries
         * @summary List affiliate summaries
         * @param {Array<number>} [affiliateIds] Ids of the affiliates you would like a summary for
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSummariesUsingGET(affiliateIds?: Array<number>, order?: string, orderDirection?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AffiliateSummaryList>>> {
            const localVarAxiosArgs = await AffiliateApiAxiosParamCreator(configuration).listSummariesUsingGET(affiliateIds, order, orderDirection, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the custom fields for the Affiliate object
         * @summary Retrieve Affiliate Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAffiliateModelUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ObjectModel>>> {
            const localVarAxiosArgs = await AffiliateApiAxiosParamCreator(configuration).retrieveAffiliateModelUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AffiliateApi - factory interface
 * @export
 */
export const AffiliateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a single affiliate
         * @summary Create an affiliate
         * @param {CreateAffiliate} [body] affiliate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAffiliateUsingPOST(body?: CreateAffiliate, options?: AxiosRequestConfig): Promise<AxiosResponse<Affiliate>> {
            return AffiliateApiFp(configuration).createAffiliateUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single affiliate
         * @summary Retrieve an affiliate
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAffiliateUsingGET(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Affiliate>> {
            return AffiliateApiFp(configuration).getAffiliateUsingGET(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all affiliate clawbacks
         * @summary List Affiliate clawbacks
         * @param {string} affiliateId affiliateId
         * @param {number} [limit] Sets a beginning range of items to return
         * @param {number} [offset] Count to offset the returned results by
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {string} [since] Optional inclusive start date
         * @param {string} [until] Optional inclusive end date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAffiliateClawbacksUsingGET(affiliateId: string, limit?: number, offset?: number, order?: string, orderDirection?: string, since?: string, until?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AffiliateClawbackList>> {
            return AffiliateApiFp(configuration).listAffiliateClawbacksUsingGET(affiliateId, limit, offset, order, orderDirection, since, until, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all affiliate redirects
         * @summary List Affiliate Redirects
         * @param {string} [affiliateId] Affiliate ID to search by
         * @param {number} [limit] Sets a beginning range of items to return
         * @param {number} [offset] Count to offset the returned results by
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAffiliateRedirectLinksUsingGET(affiliateId?: string, limit?: number, offset?: number, order?: string, orderDirection?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RedirectList>> {
            return AffiliateApiFp(configuration).listAffiliateRedirectLinksUsingGET(affiliateId, limit, offset, order, orderDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all affiliates
         * @summary List Affiliates
         * @param {string} [code] Optional affiliate parent ID to query on
         * @param {string} [contactId] Optional contact ID to query on
         * @param {number} [limit] Sets a beginning range of items to return
         * @param {string} [name] Optional affiliate name to query on
         * @param {number} [offset] Count to offset the returned results by
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {string} [parentId] Optional affiliate code to query on
         * @param {string} [programId] Optional affiliate program ID to query on
         * @param {string} [status] Optional affiliate status to query on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAffiliatesUsingGET(code?: string, contactId?: string, limit?: number, name?: string, offset?: number, order?: string, orderDirection?: string, parentId?: string, programId?: string, status?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AffiliateList>> {
            return AffiliateApiFp(configuration).listAffiliatesUsingGET(code, contactId, limit, name, offset, order, orderDirection, parentId, programId, status, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of Commissions based on Affiliate or Date Range
         * @summary List Commissions
         * @param {number} [affiliateId] Affiliate to retrieve commissions for
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCommissionsUsingGET(affiliateId?: number, limit?: number, offset?: number, order?: string, orderDirection?: string, since?: string, until?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AffiliateCommissionList>> {
            return AffiliateApiFp(configuration).listCommissionsUsingGET(affiliateId, limit, offset, order, orderDirection, since, until, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all affiliate payments
         * @summary List Affiliate payments
         * @param {number} affiliateId affiliateId
         * @param {number} [limit] Sets a beginning range of items to return
         * @param {number} [offset] Count to offset the returned results by
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {string} [since] Inclusive start date
         * @param {string} [until] Inclusive end date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPaymentsUsingGET(affiliateId: number, limit?: number, offset?: number, order?: string, orderDirection?: string, since?: string, until?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AffiliatePaymentList>> {
            return AffiliateApiFp(configuration).listPaymentsUsingGET(affiliateId, limit, offset, order, orderDirection, since, until, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of Commission Programs
         * @summary List Commission Programs
         * @param {number} [affiliateId] Id of the affiliate you would like programs for
         * @param {number} [limit] Sets a beginning range of items to return
         * @param {number} [offset] Count to offset the returned results by
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProgramsUsingGET(affiliateId?: number, limit?: number, offset?: number, order?: string, orderDirection?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AffiliateProgramList>> {
            return AffiliateApiFp(configuration).listProgramsUsingGET(affiliateId, limit, offset, order, orderDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of affiliate summaries
         * @summary List affiliate summaries
         * @param {Array<number>} [affiliateIds] Ids of the affiliates you would like a summary for
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSummariesUsingGET(affiliateIds?: Array<number>, order?: string, orderDirection?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AffiliateSummaryList>> {
            return AffiliateApiFp(configuration).listSummariesUsingGET(affiliateIds, order, orderDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the custom fields for the Affiliate object
         * @summary Retrieve Affiliate Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAffiliateModelUsingGET(options?: AxiosRequestConfig): Promise<AxiosResponse<ObjectModel>> {
            return AffiliateApiFp(configuration).retrieveAffiliateModelUsingGET(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AffiliateApi - object-oriented interface
 * @export
 * @class AffiliateApi
 * @extends {BaseAPI}
 */
export class AffiliateApi extends BaseAPI {
    /**
     * Create a single affiliate
     * @summary Create an affiliate
     * @param {CreateAffiliate} [body] affiliate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliateApi
     */
    public async createAffiliateUsingPOST(body?: CreateAffiliate, options?: AxiosRequestConfig) : Promise<AxiosResponse<Affiliate>> {
        return AffiliateApiFp(this.configuration).createAffiliateUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a single affiliate
     * @summary Retrieve an affiliate
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliateApi
     */
    public async getAffiliateUsingGET(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Affiliate>> {
        return AffiliateApiFp(this.configuration).getAffiliateUsingGET(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of all affiliate clawbacks
     * @summary List Affiliate clawbacks
     * @param {string} affiliateId affiliateId
     * @param {number} [limit] Sets a beginning range of items to return
     * @param {number} [offset] Count to offset the returned results by
     * @param {string} [order] Attribute to order items by
     * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
     * @param {string} [since] Optional inclusive start date
     * @param {string} [until] Optional inclusive end date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliateApi
     */
    public async listAffiliateClawbacksUsingGET(affiliateId: string, limit?: number, offset?: number, order?: string, orderDirection?: string, since?: string, until?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AffiliateClawbackList>> {
        return AffiliateApiFp(this.configuration).listAffiliateClawbacksUsingGET(affiliateId, limit, offset, order, orderDirection, since, until, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of all affiliate redirects
     * @summary List Affiliate Redirects
     * @param {string} [affiliateId] Affiliate ID to search by
     * @param {number} [limit] Sets a beginning range of items to return
     * @param {number} [offset] Count to offset the returned results by
     * @param {string} [order] Attribute to order items by
     * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliateApi
     */
    public async listAffiliateRedirectLinksUsingGET(affiliateId?: string, limit?: number, offset?: number, order?: string, orderDirection?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RedirectList>> {
        return AffiliateApiFp(this.configuration).listAffiliateRedirectLinksUsingGET(affiliateId, limit, offset, order, orderDirection, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of all affiliates
     * @summary List Affiliates
     * @param {string} [code] Optional affiliate parent ID to query on
     * @param {string} [contactId] Optional contact ID to query on
     * @param {number} [limit] Sets a beginning range of items to return
     * @param {string} [name] Optional affiliate name to query on
     * @param {number} [offset] Count to offset the returned results by
     * @param {string} [order] Attribute to order items by
     * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
     * @param {string} [parentId] Optional affiliate code to query on
     * @param {string} [programId] Optional affiliate program ID to query on
     * @param {string} [status] Optional affiliate status to query on
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliateApi
     */
    public async listAffiliatesUsingGET(code?: string, contactId?: string, limit?: number, name?: string, offset?: number, order?: string, orderDirection?: string, parentId?: string, programId?: string, status?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AffiliateList>> {
        return AffiliateApiFp(this.configuration).listAffiliatesUsingGET(code, contactId, limit, name, offset, order, orderDirection, parentId, programId, status, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a list of Commissions based on Affiliate or Date Range
     * @summary List Commissions
     * @param {number} [affiliateId] Affiliate to retrieve commissions for
     * @param {number} [limit] Sets a total of items to return
     * @param {number} [offset] Sets a beginning range of items to return
     * @param {string} [order] Attribute to order items by
     * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
     * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
     * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliateApi
     */
    public async listCommissionsUsingGET(affiliateId?: number, limit?: number, offset?: number, order?: string, orderDirection?: string, since?: string, until?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AffiliateCommissionList>> {
        return AffiliateApiFp(this.configuration).listCommissionsUsingGET(affiliateId, limit, offset, order, orderDirection, since, until, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of all affiliate payments
     * @summary List Affiliate payments
     * @param {number} affiliateId affiliateId
     * @param {number} [limit] Sets a beginning range of items to return
     * @param {number} [offset] Count to offset the returned results by
     * @param {string} [order] Attribute to order items by
     * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
     * @param {string} [since] Inclusive start date
     * @param {string} [until] Inclusive end date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliateApi
     */
    public async listPaymentsUsingGET(affiliateId: number, limit?: number, offset?: number, order?: string, orderDirection?: string, since?: string, until?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AffiliatePaymentList>> {
        return AffiliateApiFp(this.configuration).listPaymentsUsingGET(affiliateId, limit, offset, order, orderDirection, since, until, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a list of Commission Programs
     * @summary List Commission Programs
     * @param {number} [affiliateId] Id of the affiliate you would like programs for
     * @param {number} [limit] Sets a beginning range of items to return
     * @param {number} [offset] Count to offset the returned results by
     * @param {string} [order] Attribute to order items by
     * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliateApi
     */
    public async listProgramsUsingGET(affiliateId?: number, limit?: number, offset?: number, order?: string, orderDirection?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AffiliateProgramList>> {
        return AffiliateApiFp(this.configuration).listProgramsUsingGET(affiliateId, limit, offset, order, orderDirection, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a list of affiliate summaries
     * @summary List affiliate summaries
     * @param {Array<number>} [affiliateIds] Ids of the affiliates you would like a summary for
     * @param {string} [order] Attribute to order items by
     * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliateApi
     */
    public async listSummariesUsingGET(affiliateIds?: Array<number>, order?: string, orderDirection?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AffiliateSummaryList>> {
        return AffiliateApiFp(this.configuration).listSummariesUsingGET(affiliateIds, order, orderDirection, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the custom fields for the Affiliate object
     * @summary Retrieve Affiliate Model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliateApi
     */
    public async retrieveAffiliateModelUsingGET(options?: AxiosRequestConfig) : Promise<AxiosResponse<ObjectModel>> {
        return AffiliateApiFp(this.configuration).retrieveAffiliateModelUsingGET(options).then((request) => request(this.axios, this.basePath));
    }
}
