/* tslint:disable */
/* eslint-disable */
/**
 * Keap REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.70.0.655384-hf-202403291416
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateOrder } from '../models';
import { CreateOrderItem } from '../models';
import { CreatePayment } from '../models';
import { CreateSubscription } from '../models';
import { EcommerceReportingOrder } from '../models';
import { EcommerceReportingTransaction } from '../models';
import { InvoicePayment } from '../models';
import { ObjectModel } from '../models';
import { Order } from '../models';
import { OrderItem } from '../models';
import { OrderList } from '../models';
import { PaymentPlan } from '../models';
import { PaymentResult } from '../models';
import { Subscription } from '../models';
import { SubscriptionList } from '../models';
import { TransactionList } from '../models';
/**
 * ECommerceApi - axios parameter creator
 * @export
 */
export const ECommerceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an order item on an existing order.
         * @summary Create an Order Item
         * @param {CreateOrderItem} body createOrderItem
         * @param {number} orderId orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrderItemsOnOrderUsingPOST: async (body: CreateOrderItem, orderId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createOrderItemsOnOrderUsingPOST.');
            }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling createOrderItemsOnOrderUsingPOST.');
            }
            const localVarPath = `/v1/orders/{orderId}/items`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a one time order with order items.
         * @summary Create an Order
         * @param {CreateOrder} body createOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrderUsingPOST: async (body: CreateOrder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createOrderUsingPOST.');
            }
            const localVarPath = `/v1/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a payment record that can charge a credit card. Alternatively, adds a record of historical or external payment of cash or credit card.
         * @summary Create a Payment
         * @param {number} orderId orderId
         * @param {CreatePayment} [body] createPayment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentOnOrderUsingPOST: async (orderId: number, body?: CreatePayment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling createPaymentOnOrderUsingPOST.');
            }
            const localVarPath = `/v1/orders/{orderId}/payments`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a subscription with the specified product and product subscription id.
         * @summary Create Subscription
         * @param {CreateSubscription} body createSubscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscriptionUsingPOST: async (body: CreateSubscription, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createSubscriptionUsingPOST.');
            }
            const localVarPath = `/v1/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an order Item on specified Order
         * @summary Delete an Order Item
         * @param {number} orderId orderId
         * @param {number} orderItemId orderItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrderOrderItemUsingDELETE: async (orderId: number, orderItemId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling deleteOrderOrderItemUsingDELETE.');
            }
            // verify required parameter 'orderItemId' is not null or undefined
            if (orderItemId === null || orderItemId === undefined) {
                throw new RequiredError('orderItemId','Required parameter orderItemId was null or undefined when calling deleteOrderOrderItemUsingDELETE.');
            }
            const localVarPath = `/v1/orders/{orderId}/items/{orderItemId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)))
                .replace(`{${"orderItemId"}}`, encodeURIComponent(String(orderItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an order that does not have a payment
         * @summary Delete an Order
         * @param {number} orderId orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrderUsingDELETE: async (orderId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling deleteOrderUsingDELETE.');
            }
            const localVarPath = `/v1/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single order. The order may or may not have items.  Potential values for order status:`DRAFT`, `SENT`, `VIEWED`, `PAID`
         * @summary Retrieve an Order
         * @param {number} orderId orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderUsingGET: async (orderId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling getOrderUsingGET.');
            }
            const localVarPath = `/v1/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single transaction
         * @summary Retrieve a Transaction
         * @param {number} transactionId transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionUsingGET: async (transactionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionId' is not null or undefined
            if (transactionId === null || transactionId === undefined) {
                throw new RequiredError('transactionId','Required parameter transactionId was null or undefined when calling getTransactionUsingGET.');
            }
            const localVarPath = `/v1/transactions/{transactionId}`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of payments made against a given order, including historical or external payments of cash or credit card.
         * @summary Retrieve Order Payments
         * @param {number} orderId orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrderPaymentsUsingGET: async (orderId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling listOrderPaymentsUsingGET.');
            }
            const localVarPath = `/v1/orders/{orderId}/payments`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all orders using the specified search criteria. Each order may or may not have items.  Potential values for order status:`DRAFT`, `SENT`, `VIEWED`, `PAID`
         * @summary List Orders
         * @param {number} [contactId] Returns orders for the provided contact id
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [order] Attribute to order items by. Dates are ordered by most recent at the top. Default is creation_date.
         * @param {boolean} [paid] Sets paid status of items to return
         * @param {number} [productId] Returns orders containing the provided product id
         * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrdersUsingGET: async (contactId?: number, limit?: number, offset?: number, order?: string, paid?: boolean, productId?: number, since?: string, until?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contactId !== undefined) {
                localVarQueryParameter['contact_id'] = contactId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (paid !== undefined) {
                localVarQueryParameter['paid'] = paid;
            }

            if (productId !== undefined) {
                localVarQueryParameter['product_id'] = productId;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all subcriptions using the specified search criteria.
         * @summary List Subscriptions
         * @param {number} [contactId] Returns subscriptions for the provided contact id
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionsUsingGET: async (contactId?: number, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contactId !== undefined) {
                localVarQueryParameter['contact_id'] = contactId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all transactions on a given order using the specified search criteria
         * @summary Retrieve Order Transactions
         * @param {number} orderId orderId
         * @param {number} [contactId] Returns transactions for the provided contact id
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactionsForOrderUsingGET: async (orderId: number, contactId?: number, limit?: number, offset?: number, since?: string, until?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling listTransactionsForOrderUsingGET.');
            }
            const localVarPath = `/v1/orders/{orderId}/transactions`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contactId !== undefined) {
                localVarQueryParameter['contact_id'] = contactId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list transactions for a given contact
         * @summary List Transactions
         * @param {number} [contactId] Returns transactions for the provided contact id
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactionsUsingGET: async (contactId?: number, limit?: number, offset?: number, since?: string, until?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contactId !== undefined) {
                localVarQueryParameter['contact_id'] = contactId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the order's payment plan with the given values.
         * @summary Replace an Order Pay Plan
         * @param {PaymentPlan} body paymentPlan
         * @param {number} orderId orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replacePaymentPlanUsingPUT: async (body: PaymentPlan, orderId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling replacePaymentPlanUsingPUT.');
            }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling replacePaymentPlanUsingPUT.');
            }
            const localVarPath = `/v1/orders/{orderId}/paymentPlan`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the custom fields for the Order object
         * @summary Retrieve Custom Order Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOrderModelUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/orders/model`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the custom fields for the Subscription object
         * @summary Retrieve Subscription Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSubscriptionModelUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/subscriptions/model`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ECommerceApi - functional programming interface
 * @export
 */
export const ECommerceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates an order item on an existing order.
         * @summary Create an Order Item
         * @param {CreateOrderItem} body createOrderItem
         * @param {number} orderId orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrderItemsOnOrderUsingPOST(body: CreateOrderItem, orderId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OrderItem>>> {
            const localVarAxiosArgs = await ECommerceApiAxiosParamCreator(configuration).createOrderItemsOnOrderUsingPOST(body, orderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a one time order with order items.
         * @summary Create an Order
         * @param {CreateOrder} body createOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrderUsingPOST(body: CreateOrder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Order>>> {
            const localVarAxiosArgs = await ECommerceApiAxiosParamCreator(configuration).createOrderUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a payment record that can charge a credit card. Alternatively, adds a record of historical or external payment of cash or credit card.
         * @summary Create a Payment
         * @param {number} orderId orderId
         * @param {CreatePayment} [body] createPayment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPaymentOnOrderUsingPOST(orderId: number, body?: CreatePayment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PaymentResult>>> {
            const localVarAxiosArgs = await ECommerceApiAxiosParamCreator(configuration).createPaymentOnOrderUsingPOST(orderId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a subscription with the specified product and product subscription id.
         * @summary Create Subscription
         * @param {CreateSubscription} body createSubscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubscriptionUsingPOST(body: CreateSubscription, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Subscription>>> {
            const localVarAxiosArgs = await ECommerceApiAxiosParamCreator(configuration).createSubscriptionUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an order Item on specified Order
         * @summary Delete an Order Item
         * @param {number} orderId orderId
         * @param {number} orderItemId orderItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrderOrderItemUsingDELETE(orderId: number, orderItemId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ECommerceApiAxiosParamCreator(configuration).deleteOrderOrderItemUsingDELETE(orderId, orderItemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an order that does not have a payment
         * @summary Delete an Order
         * @param {number} orderId orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrderUsingDELETE(orderId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ECommerceApiAxiosParamCreator(configuration).deleteOrderUsingDELETE(orderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a single order. The order may or may not have items.  Potential values for order status:`DRAFT`, `SENT`, `VIEWED`, `PAID`
         * @summary Retrieve an Order
         * @param {number} orderId orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderUsingGET(orderId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<EcommerceReportingOrder>>> {
            const localVarAxiosArgs = await ECommerceApiAxiosParamCreator(configuration).getOrderUsingGET(orderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a single transaction
         * @summary Retrieve a Transaction
         * @param {number} transactionId transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactionUsingGET(transactionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<EcommerceReportingTransaction>>> {
            const localVarAxiosArgs = await ECommerceApiAxiosParamCreator(configuration).getTransactionUsingGET(transactionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of payments made against a given order, including historical or external payments of cash or credit card.
         * @summary Retrieve Order Payments
         * @param {number} orderId orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrderPaymentsUsingGET(orderId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InvoicePayment>>>> {
            const localVarAxiosArgs = await ECommerceApiAxiosParamCreator(configuration).listOrderPaymentsUsingGET(orderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of all orders using the specified search criteria. Each order may or may not have items.  Potential values for order status:`DRAFT`, `SENT`, `VIEWED`, `PAID`
         * @summary List Orders
         * @param {number} [contactId] Returns orders for the provided contact id
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [order] Attribute to order items by. Dates are ordered by most recent at the top. Default is creation_date.
         * @param {boolean} [paid] Sets paid status of items to return
         * @param {number} [productId] Returns orders containing the provided product id
         * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrdersUsingGET(contactId?: number, limit?: number, offset?: number, order?: string, paid?: boolean, productId?: number, since?: string, until?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OrderList>>> {
            const localVarAxiosArgs = await ECommerceApiAxiosParamCreator(configuration).listOrdersUsingGET(contactId, limit, offset, order, paid, productId, since, until, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of all subcriptions using the specified search criteria.
         * @summary List Subscriptions
         * @param {number} [contactId] Returns subscriptions for the provided contact id
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionsUsingGET(contactId?: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SubscriptionList>>> {
            const localVarAxiosArgs = await ECommerceApiAxiosParamCreator(configuration).listSubscriptionsUsingGET(contactId, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of all transactions on a given order using the specified search criteria
         * @summary Retrieve Order Transactions
         * @param {number} orderId orderId
         * @param {number} [contactId] Returns transactions for the provided contact id
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTransactionsForOrderUsingGET(orderId: number, contactId?: number, limit?: number, offset?: number, since?: string, until?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TransactionList>>> {
            const localVarAxiosArgs = await ECommerceApiAxiosParamCreator(configuration).listTransactionsForOrderUsingGET(orderId, contactId, limit, offset, since, until, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list transactions for a given contact
         * @summary List Transactions
         * @param {number} [contactId] Returns transactions for the provided contact id
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTransactionsUsingGET(contactId?: number, limit?: number, offset?: number, since?: string, until?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TransactionList>>> {
            const localVarAxiosArgs = await ECommerceApiAxiosParamCreator(configuration).listTransactionsUsingGET(contactId, limit, offset, since, until, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the order's payment plan with the given values.
         * @summary Replace an Order Pay Plan
         * @param {PaymentPlan} body paymentPlan
         * @param {number} orderId orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replacePaymentPlanUsingPUT(body: PaymentPlan, orderId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PaymentPlan>>> {
            const localVarAxiosArgs = await ECommerceApiAxiosParamCreator(configuration).replacePaymentPlanUsingPUT(body, orderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the custom fields for the Order object
         * @summary Retrieve Custom Order Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveOrderModelUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ObjectModel>>> {
            const localVarAxiosArgs = await ECommerceApiAxiosParamCreator(configuration).retrieveOrderModelUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the custom fields for the Subscription object
         * @summary Retrieve Subscription Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveSubscriptionModelUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ObjectModel>>> {
            const localVarAxiosArgs = await ECommerceApiAxiosParamCreator(configuration).retrieveSubscriptionModelUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ECommerceApi - factory interface
 * @export
 */
export const ECommerceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates an order item on an existing order.
         * @summary Create an Order Item
         * @param {CreateOrderItem} body createOrderItem
         * @param {number} orderId orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrderItemsOnOrderUsingPOST(body: CreateOrderItem, orderId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<OrderItem>> {
            return ECommerceApiFp(configuration).createOrderItemsOnOrderUsingPOST(body, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a one time order with order items.
         * @summary Create an Order
         * @param {CreateOrder} body createOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrderUsingPOST(body: CreateOrder, options?: AxiosRequestConfig): Promise<AxiosResponse<Order>> {
            return ECommerceApiFp(configuration).createOrderUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a payment record that can charge a credit card. Alternatively, adds a record of historical or external payment of cash or credit card.
         * @summary Create a Payment
         * @param {number} orderId orderId
         * @param {CreatePayment} [body] createPayment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPaymentOnOrderUsingPOST(orderId: number, body?: CreatePayment, options?: AxiosRequestConfig): Promise<AxiosResponse<PaymentResult>> {
            return ECommerceApiFp(configuration).createPaymentOnOrderUsingPOST(orderId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a subscription with the specified product and product subscription id.
         * @summary Create Subscription
         * @param {CreateSubscription} body createSubscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubscriptionUsingPOST(body: CreateSubscription, options?: AxiosRequestConfig): Promise<AxiosResponse<Subscription>> {
            return ECommerceApiFp(configuration).createSubscriptionUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an order Item on specified Order
         * @summary Delete an Order Item
         * @param {number} orderId orderId
         * @param {number} orderItemId orderItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrderOrderItemUsingDELETE(orderId: number, orderItemId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ECommerceApiFp(configuration).deleteOrderOrderItemUsingDELETE(orderId, orderItemId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an order that does not have a payment
         * @summary Delete an Order
         * @param {number} orderId orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrderUsingDELETE(orderId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ECommerceApiFp(configuration).deleteOrderUsingDELETE(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single order. The order may or may not have items.  Potential values for order status:`DRAFT`, `SENT`, `VIEWED`, `PAID`
         * @summary Retrieve an Order
         * @param {number} orderId orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderUsingGET(orderId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<EcommerceReportingOrder>> {
            return ECommerceApiFp(configuration).getOrderUsingGET(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single transaction
         * @summary Retrieve a Transaction
         * @param {number} transactionId transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactionUsingGET(transactionId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<EcommerceReportingTransaction>> {
            return ECommerceApiFp(configuration).getTransactionUsingGET(transactionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of payments made against a given order, including historical or external payments of cash or credit card.
         * @summary Retrieve Order Payments
         * @param {number} orderId orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrderPaymentsUsingGET(orderId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InvoicePayment>>> {
            return ECommerceApiFp(configuration).listOrderPaymentsUsingGET(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all orders using the specified search criteria. Each order may or may not have items.  Potential values for order status:`DRAFT`, `SENT`, `VIEWED`, `PAID`
         * @summary List Orders
         * @param {number} [contactId] Returns orders for the provided contact id
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [order] Attribute to order items by. Dates are ordered by most recent at the top. Default is creation_date.
         * @param {boolean} [paid] Sets paid status of items to return
         * @param {number} [productId] Returns orders containing the provided product id
         * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrdersUsingGET(contactId?: number, limit?: number, offset?: number, order?: string, paid?: boolean, productId?: number, since?: string, until?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OrderList>> {
            return ECommerceApiFp(configuration).listOrdersUsingGET(contactId, limit, offset, order, paid, productId, since, until, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all subcriptions using the specified search criteria.
         * @summary List Subscriptions
         * @param {number} [contactId] Returns subscriptions for the provided contact id
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionsUsingGET(contactId?: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SubscriptionList>> {
            return ECommerceApiFp(configuration).listSubscriptionsUsingGET(contactId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all transactions on a given order using the specified search criteria
         * @summary Retrieve Order Transactions
         * @param {number} orderId orderId
         * @param {number} [contactId] Returns transactions for the provided contact id
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTransactionsForOrderUsingGET(orderId: number, contactId?: number, limit?: number, offset?: number, since?: string, until?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TransactionList>> {
            return ECommerceApiFp(configuration).listTransactionsForOrderUsingGET(orderId, contactId, limit, offset, since, until, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list transactions for a given contact
         * @summary List Transactions
         * @param {number} [contactId] Returns transactions for the provided contact id
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTransactionsUsingGET(contactId?: number, limit?: number, offset?: number, since?: string, until?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TransactionList>> {
            return ECommerceApiFp(configuration).listTransactionsUsingGET(contactId, limit, offset, since, until, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the order's payment plan with the given values.
         * @summary Replace an Order Pay Plan
         * @param {PaymentPlan} body paymentPlan
         * @param {number} orderId orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replacePaymentPlanUsingPUT(body: PaymentPlan, orderId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PaymentPlan>> {
            return ECommerceApiFp(configuration).replacePaymentPlanUsingPUT(body, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the custom fields for the Order object
         * @summary Retrieve Custom Order Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveOrderModelUsingGET(options?: AxiosRequestConfig): Promise<AxiosResponse<ObjectModel>> {
            return ECommerceApiFp(configuration).retrieveOrderModelUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the custom fields for the Subscription object
         * @summary Retrieve Subscription Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveSubscriptionModelUsingGET(options?: AxiosRequestConfig): Promise<AxiosResponse<ObjectModel>> {
            return ECommerceApiFp(configuration).retrieveSubscriptionModelUsingGET(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ECommerceApi - object-oriented interface
 * @export
 * @class ECommerceApi
 * @extends {BaseAPI}
 */
export class ECommerceApi extends BaseAPI {
    /**
     * Creates an order item on an existing order.
     * @summary Create an Order Item
     * @param {CreateOrderItem} body createOrderItem
     * @param {number} orderId orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECommerceApi
     */
    public async createOrderItemsOnOrderUsingPOST(body: CreateOrderItem, orderId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<OrderItem>> {
        return ECommerceApiFp(this.configuration).createOrderItemsOnOrderUsingPOST(body, orderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a one time order with order items.
     * @summary Create an Order
     * @param {CreateOrder} body createOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECommerceApi
     */
    public async createOrderUsingPOST(body: CreateOrder, options?: AxiosRequestConfig) : Promise<AxiosResponse<Order>> {
        return ECommerceApiFp(this.configuration).createOrderUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a payment record that can charge a credit card. Alternatively, adds a record of historical or external payment of cash or credit card.
     * @summary Create a Payment
     * @param {number} orderId orderId
     * @param {CreatePayment} [body] createPayment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECommerceApi
     */
    public async createPaymentOnOrderUsingPOST(orderId: number, body?: CreatePayment, options?: AxiosRequestConfig) : Promise<AxiosResponse<PaymentResult>> {
        return ECommerceApiFp(this.configuration).createPaymentOnOrderUsingPOST(orderId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a subscription with the specified product and product subscription id.
     * @summary Create Subscription
     * @param {CreateSubscription} body createSubscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECommerceApi
     */
    public async createSubscriptionUsingPOST(body: CreateSubscription, options?: AxiosRequestConfig) : Promise<AxiosResponse<Subscription>> {
        return ECommerceApiFp(this.configuration).createSubscriptionUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an order Item on specified Order
     * @summary Delete an Order Item
     * @param {number} orderId orderId
     * @param {number} orderItemId orderItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECommerceApi
     */
    public async deleteOrderOrderItemUsingDELETE(orderId: number, orderItemId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ECommerceApiFp(this.configuration).deleteOrderOrderItemUsingDELETE(orderId, orderItemId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an order that does not have a payment
     * @summary Delete an Order
     * @param {number} orderId orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECommerceApi
     */
    public async deleteOrderUsingDELETE(orderId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ECommerceApiFp(this.configuration).deleteOrderUsingDELETE(orderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a single order. The order may or may not have items.  Potential values for order status:`DRAFT`, `SENT`, `VIEWED`, `PAID`
     * @summary Retrieve an Order
     * @param {number} orderId orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECommerceApi
     */
    public async getOrderUsingGET(orderId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<EcommerceReportingOrder>> {
        return ECommerceApiFp(this.configuration).getOrderUsingGET(orderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a single transaction
     * @summary Retrieve a Transaction
     * @param {number} transactionId transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECommerceApi
     */
    public async getTransactionUsingGET(transactionId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<EcommerceReportingTransaction>> {
        return ECommerceApiFp(this.configuration).getTransactionUsingGET(transactionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of payments made against a given order, including historical or external payments of cash or credit card.
     * @summary Retrieve Order Payments
     * @param {number} orderId orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECommerceApi
     */
    public async listOrderPaymentsUsingGET(orderId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InvoicePayment>>> {
        return ECommerceApiFp(this.configuration).listOrderPaymentsUsingGET(orderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of all orders using the specified search criteria. Each order may or may not have items.  Potential values for order status:`DRAFT`, `SENT`, `VIEWED`, `PAID`
     * @summary List Orders
     * @param {number} [contactId] Returns orders for the provided contact id
     * @param {number} [limit] Sets a total of items to return
     * @param {number} [offset] Sets a beginning range of items to return
     * @param {string} [order] Attribute to order items by. Dates are ordered by most recent at the top. Default is creation_date.
     * @param {boolean} [paid] Sets paid status of items to return
     * @param {number} [productId] Returns orders containing the provided product id
     * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
     * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECommerceApi
     */
    public async listOrdersUsingGET(contactId?: number, limit?: number, offset?: number, order?: string, paid?: boolean, productId?: number, since?: string, until?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<OrderList>> {
        return ECommerceApiFp(this.configuration).listOrdersUsingGET(contactId, limit, offset, order, paid, productId, since, until, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of all subcriptions using the specified search criteria.
     * @summary List Subscriptions
     * @param {number} [contactId] Returns subscriptions for the provided contact id
     * @param {number} [limit] Sets a total of items to return
     * @param {number} [offset] Sets a beginning range of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECommerceApi
     */
    public async listSubscriptionsUsingGET(contactId?: number, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SubscriptionList>> {
        return ECommerceApiFp(this.configuration).listSubscriptionsUsingGET(contactId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of all transactions on a given order using the specified search criteria
     * @summary Retrieve Order Transactions
     * @param {number} orderId orderId
     * @param {number} [contactId] Returns transactions for the provided contact id
     * @param {number} [limit] Sets a total of items to return
     * @param {number} [offset] Sets a beginning range of items to return
     * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
     * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECommerceApi
     */
    public async listTransactionsForOrderUsingGET(orderId: number, contactId?: number, limit?: number, offset?: number, since?: string, until?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TransactionList>> {
        return ECommerceApiFp(this.configuration).listTransactionsForOrderUsingGET(orderId, contactId, limit, offset, since, until, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list transactions for a given contact
     * @summary List Transactions
     * @param {number} [contactId] Returns transactions for the provided contact id
     * @param {number} [limit] Sets a total of items to return
     * @param {number} [offset] Sets a beginning range of items to return
     * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
     * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECommerceApi
     */
    public async listTransactionsUsingGET(contactId?: number, limit?: number, offset?: number, since?: string, until?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TransactionList>> {
        return ECommerceApiFp(this.configuration).listTransactionsUsingGET(contactId, limit, offset, since, until, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replaces the order's payment plan with the given values.
     * @summary Replace an Order Pay Plan
     * @param {PaymentPlan} body paymentPlan
     * @param {number} orderId orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECommerceApi
     */
    public async replacePaymentPlanUsingPUT(body: PaymentPlan, orderId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<PaymentPlan>> {
        return ECommerceApiFp(this.configuration).replacePaymentPlanUsingPUT(body, orderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the custom fields for the Order object
     * @summary Retrieve Custom Order Model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECommerceApi
     */
    public async retrieveOrderModelUsingGET(options?: AxiosRequestConfig) : Promise<AxiosResponse<ObjectModel>> {
        return ECommerceApiFp(this.configuration).retrieveOrderModelUsingGET(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the custom fields for the Subscription object
     * @summary Retrieve Subscription Model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECommerceApi
     */
    public async retrieveSubscriptionModelUsingGET(options?: AxiosRequestConfig) : Promise<AxiosResponse<ObjectModel>> {
        return ECommerceApiFp(this.configuration).retrieveSubscriptionModelUsingGET(options).then((request) => request(this.axios, this.basePath));
    }
}
