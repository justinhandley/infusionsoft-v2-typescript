/* tslint:disable */
/* eslint-disable */
/**
 * Keap REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.70.0.655384-hf-202403291416
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateRestCustomField } from '../models';
import { CustomFieldMetaData } from '../models';
import { ObjectModel } from '../models';
import { Task } from '../models';
import { TaskList } from '../models';
/**
 * TaskApi - axios parameter creator
 * @export
 */
export const TaskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a custom field of the specified type and options to the Task object.
         * @summary Create a Custom Field
         * @param {CreateRestCustomField} body customField
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskCustomFieldUsingPOST: async (body: CreateRestCustomField, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createTaskCustomFieldUsingPOST.');
            }
            const localVarPath = `/v1/tasks/model/customFields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new task as the authenticated user.   *Note:* Contact must contain at least one item in the fields `title` and `due_date`.   All other attributes are optional.   This endpoint does not currently support setting Custom Field values.
         * @summary Create a Task
         * @param {Task} body task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskUsingPOST: async (body: Task, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createTaskUsingPOST.');
            }
            const localVarPath = `/v1/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Permanently deletes a task
         * @summary Delete a Task
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskUsingDELETE: async (taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling deleteTaskUsingDELETE.');
            }
            const localVarPath = `/v1/tasks/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single task
         * @summary Retrieve a Task
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskUsingGET: async (taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling getTaskUsingGET.');
            }
            const localVarPath = `/v1/tasks/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves Tasks belonging to the authenticated user using the specified search criteria
         * @summary Search Tasks
         * @param {boolean} [completed] Sets completed status of items to return
         * @param {number} [contactId] Returns tasks for the provided contact id
         * @param {boolean} [hasDueDate] Returns tasks that have an &#x27;action date&#x27; when set to true
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [order] Attribute to order items by
         * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {number} [userId] Returns tasks for the provided user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTasksForCurrentUserUsingGET: async (completed?: boolean, contactId?: number, hasDueDate?: boolean, limit?: number, offset?: number, order?: string, since?: string, until?: string, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/tasks/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (completed !== undefined) {
                localVarQueryParameter['completed'] = completed;
            }

            if (contactId !== undefined) {
                localVarQueryParameter['contact_id'] = contactId;
            }

            if (hasDueDate !== undefined) {
                localVarQueryParameter['has_due_date'] = hasDueDate;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all tasks using the specified search criteria
         * @summary List Tasks
         * @param {boolean} [completed] Sets completed status of items to return
         * @param {number} [contactId] contact_id
         * @param {boolean} [hasDueDate] has_due_date
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [order] Attribute to order items by
         * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {number} [userId] user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTasksUsingGET: async (completed?: boolean, contactId?: number, hasDueDate?: boolean, limit?: number, offset?: number, order?: string, since?: string, until?: string, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (completed !== undefined) {
                localVarQueryParameter['completed'] = completed;
            }

            if (contactId !== undefined) {
                localVarQueryParameter['contact_id'] = contactId;
            }

            if (hasDueDate !== undefined) {
                localVarQueryParameter['has_due_date'] = hasDueDate;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the custom fields for the Task object
         * @summary Retrieve Task Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTaskModelUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/tasks/model`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a task with only the values provided in the request.  This endpoint does not currently support updating Custom Field values.
         * @summary Update a Task
         * @param {Task} body task
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePropertiesOnTaskUsingPATCH: async (body: Task, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updatePropertiesOnTaskUsingPATCH.');
            }
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling updatePropertiesOnTaskUsingPATCH.');
            }
            const localVarPath = `/v1/tasks/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces a task with the values provided in the request.  This endpoint does not currently support updating Custom Field values.
         * @summary Replace a Task
         * @param {Task} body task
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskUsingPUT: async (body: Task, taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateTaskUsingPUT.');
            }
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling updateTaskUsingPUT.');
            }
            const localVarPath = `/v1/tasks/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskApi - functional programming interface
 * @export
 */
export const TaskApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Adds a custom field of the specified type and options to the Task object.
         * @summary Create a Custom Field
         * @param {CreateRestCustomField} body customField
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTaskCustomFieldUsingPOST(body: CreateRestCustomField, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomFieldMetaData>>> {
            const localVarAxiosArgs = await TaskApiAxiosParamCreator(configuration).createTaskCustomFieldUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new task as the authenticated user.   *Note:* Contact must contain at least one item in the fields `title` and `due_date`.   All other attributes are optional.   This endpoint does not currently support setting Custom Field values.
         * @summary Create a Task
         * @param {Task} body task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTaskUsingPOST(body: Task, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Task>>> {
            const localVarAxiosArgs = await TaskApiAxiosParamCreator(configuration).createTaskUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Permanently deletes a task
         * @summary Delete a Task
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTaskUsingDELETE(taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await TaskApiAxiosParamCreator(configuration).deleteTaskUsingDELETE(taskId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a single task
         * @summary Retrieve a Task
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskUsingGET(taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Task>>> {
            const localVarAxiosArgs = await TaskApiAxiosParamCreator(configuration).getTaskUsingGET(taskId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves Tasks belonging to the authenticated user using the specified search criteria
         * @summary Search Tasks
         * @param {boolean} [completed] Sets completed status of items to return
         * @param {number} [contactId] Returns tasks for the provided contact id
         * @param {boolean} [hasDueDate] Returns tasks that have an &#x27;action date&#x27; when set to true
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [order] Attribute to order items by
         * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {number} [userId] Returns tasks for the provided user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTasksForCurrentUserUsingGET(completed?: boolean, contactId?: number, hasDueDate?: boolean, limit?: number, offset?: number, order?: string, since?: string, until?: string, userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TaskList>>> {
            const localVarAxiosArgs = await TaskApiAxiosParamCreator(configuration).listTasksForCurrentUserUsingGET(completed, contactId, hasDueDate, limit, offset, order, since, until, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of all tasks using the specified search criteria
         * @summary List Tasks
         * @param {boolean} [completed] Sets completed status of items to return
         * @param {number} [contactId] contact_id
         * @param {boolean} [hasDueDate] has_due_date
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [order] Attribute to order items by
         * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {number} [userId] user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTasksUsingGET(completed?: boolean, contactId?: number, hasDueDate?: boolean, limit?: number, offset?: number, order?: string, since?: string, until?: string, userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TaskList>>> {
            const localVarAxiosArgs = await TaskApiAxiosParamCreator(configuration).listTasksUsingGET(completed, contactId, hasDueDate, limit, offset, order, since, until, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the custom fields for the Task object
         * @summary Retrieve Task Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveTaskModelUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ObjectModel>>> {
            const localVarAxiosArgs = await TaskApiAxiosParamCreator(configuration).retrieveTaskModelUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a task with only the values provided in the request.  This endpoint does not currently support updating Custom Field values.
         * @summary Update a Task
         * @param {Task} body task
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePropertiesOnTaskUsingPATCH(body: Task, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Task>>> {
            const localVarAxiosArgs = await TaskApiAxiosParamCreator(configuration).updatePropertiesOnTaskUsingPATCH(body, taskId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces a task with the values provided in the request.  This endpoint does not currently support updating Custom Field values.
         * @summary Replace a Task
         * @param {Task} body task
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTaskUsingPUT(body: Task, taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Task>>> {
            const localVarAxiosArgs = await TaskApiAxiosParamCreator(configuration).updateTaskUsingPUT(body, taskId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TaskApi - factory interface
 * @export
 */
export const TaskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Adds a custom field of the specified type and options to the Task object.
         * @summary Create a Custom Field
         * @param {CreateRestCustomField} body customField
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTaskCustomFieldUsingPOST(body: CreateRestCustomField, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomFieldMetaData>> {
            return TaskApiFp(configuration).createTaskCustomFieldUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new task as the authenticated user.   *Note:* Contact must contain at least one item in the fields `title` and `due_date`.   All other attributes are optional.   This endpoint does not currently support setting Custom Field values.
         * @summary Create a Task
         * @param {Task} body task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTaskUsingPOST(body: Task, options?: AxiosRequestConfig): Promise<AxiosResponse<Task>> {
            return TaskApiFp(configuration).createTaskUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Permanently deletes a task
         * @summary Delete a Task
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTaskUsingDELETE(taskId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return TaskApiFp(configuration).deleteTaskUsingDELETE(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single task
         * @summary Retrieve a Task
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskUsingGET(taskId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Task>> {
            return TaskApiFp(configuration).getTaskUsingGET(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves Tasks belonging to the authenticated user using the specified search criteria
         * @summary Search Tasks
         * @param {boolean} [completed] Sets completed status of items to return
         * @param {number} [contactId] Returns tasks for the provided contact id
         * @param {boolean} [hasDueDate] Returns tasks that have an &#x27;action date&#x27; when set to true
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [order] Attribute to order items by
         * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {number} [userId] Returns tasks for the provided user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTasksForCurrentUserUsingGET(completed?: boolean, contactId?: number, hasDueDate?: boolean, limit?: number, offset?: number, order?: string, since?: string, until?: string, userId?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<TaskList>> {
            return TaskApiFp(configuration).listTasksForCurrentUserUsingGET(completed, contactId, hasDueDate, limit, offset, order, since, until, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all tasks using the specified search criteria
         * @summary List Tasks
         * @param {boolean} [completed] Sets completed status of items to return
         * @param {number} [contactId] contact_id
         * @param {boolean} [hasDueDate] has_due_date
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [order] Attribute to order items by
         * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {number} [userId] user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTasksUsingGET(completed?: boolean, contactId?: number, hasDueDate?: boolean, limit?: number, offset?: number, order?: string, since?: string, until?: string, userId?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<TaskList>> {
            return TaskApiFp(configuration).listTasksUsingGET(completed, contactId, hasDueDate, limit, offset, order, since, until, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the custom fields for the Task object
         * @summary Retrieve Task Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveTaskModelUsingGET(options?: AxiosRequestConfig): Promise<AxiosResponse<ObjectModel>> {
            return TaskApiFp(configuration).retrieveTaskModelUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a task with only the values provided in the request.  This endpoint does not currently support updating Custom Field values.
         * @summary Update a Task
         * @param {Task} body task
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePropertiesOnTaskUsingPATCH(body: Task, taskId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Task>> {
            return TaskApiFp(configuration).updatePropertiesOnTaskUsingPATCH(body, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces a task with the values provided in the request.  This endpoint does not currently support updating Custom Field values.
         * @summary Replace a Task
         * @param {Task} body task
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTaskUsingPUT(body: Task, taskId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Task>> {
            return TaskApiFp(configuration).updateTaskUsingPUT(body, taskId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskApi - object-oriented interface
 * @export
 * @class TaskApi
 * @extends {BaseAPI}
 */
export class TaskApi extends BaseAPI {
    /**
     * Adds a custom field of the specified type and options to the Task object.
     * @summary Create a Custom Field
     * @param {CreateRestCustomField} body customField
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public async createTaskCustomFieldUsingPOST(body: CreateRestCustomField, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomFieldMetaData>> {
        return TaskApiFp(this.configuration).createTaskCustomFieldUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new task as the authenticated user.   *Note:* Contact must contain at least one item in the fields `title` and `due_date`.   All other attributes are optional.   This endpoint does not currently support setting Custom Field values.
     * @summary Create a Task
     * @param {Task} body task
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public async createTaskUsingPOST(body: Task, options?: AxiosRequestConfig) : Promise<AxiosResponse<Task>> {
        return TaskApiFp(this.configuration).createTaskUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Permanently deletes a task
     * @summary Delete a Task
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public async deleteTaskUsingDELETE(taskId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return TaskApiFp(this.configuration).deleteTaskUsingDELETE(taskId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a single task
     * @summary Retrieve a Task
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public async getTaskUsingGET(taskId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Task>> {
        return TaskApiFp(this.configuration).getTaskUsingGET(taskId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves Tasks belonging to the authenticated user using the specified search criteria
     * @summary Search Tasks
     * @param {boolean} [completed] Sets completed status of items to return
     * @param {number} [contactId] Returns tasks for the provided contact id
     * @param {boolean} [hasDueDate] Returns tasks that have an &#x27;action date&#x27; when set to true
     * @param {number} [limit] Sets a total of items to return
     * @param {number} [offset] Sets a beginning range of items to return
     * @param {string} [order] Attribute to order items by
     * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
     * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
     * @param {number} [userId] Returns tasks for the provided user id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public async listTasksForCurrentUserUsingGET(completed?: boolean, contactId?: number, hasDueDate?: boolean, limit?: number, offset?: number, order?: string, since?: string, until?: string, userId?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<TaskList>> {
        return TaskApiFp(this.configuration).listTasksForCurrentUserUsingGET(completed, contactId, hasDueDate, limit, offset, order, since, until, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of all tasks using the specified search criteria
     * @summary List Tasks
     * @param {boolean} [completed] Sets completed status of items to return
     * @param {number} [contactId] contact_id
     * @param {boolean} [hasDueDate] has_due_date
     * @param {number} [limit] Sets a total of items to return
     * @param {number} [offset] Sets a beginning range of items to return
     * @param {string} [order] Attribute to order items by
     * @param {string} [since] Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
     * @param {string} [until] Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
     * @param {number} [userId] user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public async listTasksUsingGET(completed?: boolean, contactId?: number, hasDueDate?: boolean, limit?: number, offset?: number, order?: string, since?: string, until?: string, userId?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<TaskList>> {
        return TaskApiFp(this.configuration).listTasksUsingGET(completed, contactId, hasDueDate, limit, offset, order, since, until, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the custom fields for the Task object
     * @summary Retrieve Task Model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public async retrieveTaskModelUsingGET(options?: AxiosRequestConfig) : Promise<AxiosResponse<ObjectModel>> {
        return TaskApiFp(this.configuration).retrieveTaskModelUsingGET(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a task with only the values provided in the request.  This endpoint does not currently support updating Custom Field values.
     * @summary Update a Task
     * @param {Task} body task
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public async updatePropertiesOnTaskUsingPATCH(body: Task, taskId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Task>> {
        return TaskApiFp(this.configuration).updatePropertiesOnTaskUsingPATCH(body, taskId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replaces a task with the values provided in the request.  This endpoint does not currently support updating Custom Field values.
     * @summary Replace a Task
     * @param {Task} body task
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public async updateTaskUsingPUT(body: Task, taskId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Task>> {
        return TaskApiFp(this.configuration).updateTaskUsingPUT(body, taskId, options).then((request) => request(this.axios, this.basePath));
    }
}
