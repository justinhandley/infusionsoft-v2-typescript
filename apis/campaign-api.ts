/* tslint:disable */
/* eslint-disable */
/**
 * Keap REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.70.0.655384-hf-202403291416
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AchieveApiGoalEvent } from '../models';
import { CampaignList } from '../models';
import { CampaignWithStats } from '../models';
import { GoalEventResultDTO } from '../models';
import { SetOfIds } from '../models';
/**
 * CampaignApi - axios parameter creator
 * @export
 */
export const CampaignApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a single contact to a campaign sequence
         * @summary Add to Campaign Sequence
         * @param {number} campaignId campaignId
         * @param {number} contactId contactId
         * @param {number} sequenceId sequenceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContactToCampaignSequenceUsingPOST: async (campaignId: number, contactId: number, sequenceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            if (campaignId === null || campaignId === undefined) {
                throw new RequiredError('campaignId','Required parameter campaignId was null or undefined when calling addContactToCampaignSequenceUsingPOST.');
            }
            // verify required parameter 'contactId' is not null or undefined
            if (contactId === null || contactId === undefined) {
                throw new RequiredError('contactId','Required parameter contactId was null or undefined when calling addContactToCampaignSequenceUsingPOST.');
            }
            // verify required parameter 'sequenceId' is not null or undefined
            if (sequenceId === null || sequenceId === undefined) {
                throw new RequiredError('sequenceId','Required parameter sequenceId was null or undefined when calling addContactToCampaignSequenceUsingPOST.');
            }
            const localVarPath = `/v1/campaigns/{campaignId}/sequences/{sequenceId}/contacts/{contactId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)))
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)))
                .replace(`{${"sequenceId"}}`, encodeURIComponent(String(sequenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a list of contacts to a campaign sequence Response contains a map of the provided list of Contact Ids related to their individual result.
         * @summary Add Multiple to Campaign Sequence
         * @param {SetOfIds} body ids
         * @param {number} campaignId campaignId
         * @param {number} sequenceId sequenceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContactsToCampaignSequenceUsingPOST: async (body: SetOfIds, campaignId: number, sequenceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addContactsToCampaignSequenceUsingPOST.');
            }
            // verify required parameter 'campaignId' is not null or undefined
            if (campaignId === null || campaignId === undefined) {
                throw new RequiredError('campaignId','Required parameter campaignId was null or undefined when calling addContactsToCampaignSequenceUsingPOST.');
            }
            // verify required parameter 'sequenceId' is not null or undefined
            if (sequenceId === null || sequenceId === undefined) {
                throw new RequiredError('sequenceId','Required parameter sequenceId was null or undefined when calling addContactsToCampaignSequenceUsingPOST.');
            }
            const localVarPath = `/v1/campaigns/{campaignId}/sequences/{sequenceId}/contacts`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)))
                .replace(`{${"sequenceId"}}`, encodeURIComponent(String(sequenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Achieves API goal for campaigns with matching integration, callName for a given contactId
         * @summary Achieve API Goal
         * @param {AchieveApiGoalEvent} body goalEvent
         * @param {string} callName callName
         * @param {string} integration integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAchieveApiGoalEventUsingPOST: async (body: AchieveApiGoalEvent, callName: string, integration: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createAchieveApiGoalEventUsingPOST.');
            }
            // verify required parameter 'callName' is not null or undefined
            if (callName === null || callName === undefined) {
                throw new RequiredError('callName','Required parameter callName was null or undefined when calling createAchieveApiGoalEventUsingPOST.');
            }
            // verify required parameter 'integration' is not null or undefined
            if (integration === null || integration === undefined) {
                throw new RequiredError('integration','Required parameter integration was null or undefined when calling createAchieveApiGoalEventUsingPOST.');
            }
            const localVarPath = `/v1/campaigns/goals/{integration}/{callName}`
                .replace(`{${"callName"}}`, encodeURIComponent(String(callName)))
                .replace(`{${"integration"}}`, encodeURIComponent(String(integration)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single campaign
         * @summary Retrieve a Campaign
         * @param {number} campaignId campaignId
         * @param {Array<string>} [optionalProperties] Comma-delimited list of Campaign properties to include in the response. (The fields &#x60;goals&#x60; and &#x60;sequences&#x60; aren&#x27;t included, by default.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignUsingGET: async (campaignId: number, optionalProperties?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            if (campaignId === null || campaignId === undefined) {
                throw new RequiredError('campaignId','Required parameter campaignId was null or undefined when calling getCampaignUsingGET.');
            }
            const localVarPath = `/v1/campaigns/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (optionalProperties) {
                localVarQueryParameter['optional_properties'] = optionalProperties;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all campaigns for the authenticated user
         * @summary List Campaigns
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {string} [searchText] Optional text to search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaignsUsingGET: async (limit?: number, offset?: number, order?: string, orderDirection?: string, searchText?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/campaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (orderDirection !== undefined) {
                localVarQueryParameter['order_direction'] = orderDirection;
            }

            if (searchText !== undefined) {
                localVarQueryParameter['search_text'] = searchText;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a single contact from a campaign sequence
         * @summary Remove from Campaign Sequence
         * @param {number} campaignId campaignId
         * @param {number} contactId contactId
         * @param {number} sequenceId sequenceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeContactFromCampaignSequenceUsingDELETE: async (campaignId: number, contactId: number, sequenceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            if (campaignId === null || campaignId === undefined) {
                throw new RequiredError('campaignId','Required parameter campaignId was null or undefined when calling removeContactFromCampaignSequenceUsingDELETE.');
            }
            // verify required parameter 'contactId' is not null or undefined
            if (contactId === null || contactId === undefined) {
                throw new RequiredError('contactId','Required parameter contactId was null or undefined when calling removeContactFromCampaignSequenceUsingDELETE.');
            }
            // verify required parameter 'sequenceId' is not null or undefined
            if (sequenceId === null || sequenceId === undefined) {
                throw new RequiredError('sequenceId','Required parameter sequenceId was null or undefined when calling removeContactFromCampaignSequenceUsingDELETE.');
            }
            const localVarPath = `/v1/campaigns/{campaignId}/sequences/{sequenceId}/contacts/{contactId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)))
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)))
                .replace(`{${"sequenceId"}}`, encodeURIComponent(String(sequenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a list of contacts from a campaign sequence
         * @summary Remove Multiple from Campaign Sequence
         * @param {SetOfIds} body ids
         * @param {number} campaignId campaignId
         * @param {number} sequenceId sequenceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeContactsFromCampaignSequenceUsingDELETE: async (body: SetOfIds, campaignId: number, sequenceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling removeContactsFromCampaignSequenceUsingDELETE.');
            }
            // verify required parameter 'campaignId' is not null or undefined
            if (campaignId === null || campaignId === undefined) {
                throw new RequiredError('campaignId','Required parameter campaignId was null or undefined when calling removeContactsFromCampaignSequenceUsingDELETE.');
            }
            // verify required parameter 'sequenceId' is not null or undefined
            if (sequenceId === null || sequenceId === undefined) {
                throw new RequiredError('sequenceId','Required parameter sequenceId was null or undefined when calling removeContactsFromCampaignSequenceUsingDELETE.');
            }
            const localVarPath = `/v1/campaigns/{campaignId}/sequences/{sequenceId}/contacts`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)))
                .replace(`{${"sequenceId"}}`, encodeURIComponent(String(sequenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CampaignApi - functional programming interface
 * @export
 */
export const CampaignApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Adds a single contact to a campaign sequence
         * @summary Add to Campaign Sequence
         * @param {number} campaignId campaignId
         * @param {number} contactId contactId
         * @param {number} sequenceId sequenceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addContactToCampaignSequenceUsingPOST(campaignId: number, contactId: number, sequenceId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CampaignApiAxiosParamCreator(configuration).addContactToCampaignSequenceUsingPOST(campaignId, contactId, sequenceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a list of contacts to a campaign sequence Response contains a map of the provided list of Contact Ids related to their individual result.
         * @summary Add Multiple to Campaign Sequence
         * @param {SetOfIds} body ids
         * @param {number} campaignId campaignId
         * @param {number} sequenceId sequenceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addContactsToCampaignSequenceUsingPOST(body: SetOfIds, campaignId: number, sequenceId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<{ [key: string]: string; }>>> {
            const localVarAxiosArgs = await CampaignApiAxiosParamCreator(configuration).addContactsToCampaignSequenceUsingPOST(body, campaignId, sequenceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Achieves API goal for campaigns with matching integration, callName for a given contactId
         * @summary Achieve API Goal
         * @param {AchieveApiGoalEvent} body goalEvent
         * @param {string} callName callName
         * @param {string} integration integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAchieveApiGoalEventUsingPOST(body: AchieveApiGoalEvent, callName: string, integration: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GoalEventResultDTO>>>> {
            const localVarAxiosArgs = await CampaignApiAxiosParamCreator(configuration).createAchieveApiGoalEventUsingPOST(body, callName, integration, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a single campaign
         * @summary Retrieve a Campaign
         * @param {number} campaignId campaignId
         * @param {Array<string>} [optionalProperties] Comma-delimited list of Campaign properties to include in the response. (The fields &#x60;goals&#x60; and &#x60;sequences&#x60; aren&#x27;t included, by default.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignUsingGET(campaignId: number, optionalProperties?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CampaignWithStats>>> {
            const localVarAxiosArgs = await CampaignApiAxiosParamCreator(configuration).getCampaignUsingGET(campaignId, optionalProperties, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves all campaigns for the authenticated user
         * @summary List Campaigns
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {string} [searchText] Optional text to search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCampaignsUsingGET(limit?: number, offset?: number, order?: string, orderDirection?: string, searchText?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CampaignList>>> {
            const localVarAxiosArgs = await CampaignApiAxiosParamCreator(configuration).listCampaignsUsingGET(limit, offset, order, orderDirection, searchText, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Removes a single contact from a campaign sequence
         * @summary Remove from Campaign Sequence
         * @param {number} campaignId campaignId
         * @param {number} contactId contactId
         * @param {number} sequenceId sequenceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeContactFromCampaignSequenceUsingDELETE(campaignId: number, contactId: number, sequenceId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CampaignApiAxiosParamCreator(configuration).removeContactFromCampaignSequenceUsingDELETE(campaignId, contactId, sequenceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Removes a list of contacts from a campaign sequence
         * @summary Remove Multiple from Campaign Sequence
         * @param {SetOfIds} body ids
         * @param {number} campaignId campaignId
         * @param {number} sequenceId sequenceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeContactsFromCampaignSequenceUsingDELETE(body: SetOfIds, campaignId: number, sequenceId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CampaignApiAxiosParamCreator(configuration).removeContactsFromCampaignSequenceUsingDELETE(body, campaignId, sequenceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CampaignApi - factory interface
 * @export
 */
export const CampaignApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Adds a single contact to a campaign sequence
         * @summary Add to Campaign Sequence
         * @param {number} campaignId campaignId
         * @param {number} contactId contactId
         * @param {number} sequenceId sequenceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addContactToCampaignSequenceUsingPOST(campaignId: number, contactId: number, sequenceId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CampaignApiFp(configuration).addContactToCampaignSequenceUsingPOST(campaignId, contactId, sequenceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a list of contacts to a campaign sequence Response contains a map of the provided list of Contact Ids related to their individual result.
         * @summary Add Multiple to Campaign Sequence
         * @param {SetOfIds} body ids
         * @param {number} campaignId campaignId
         * @param {number} sequenceId sequenceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addContactsToCampaignSequenceUsingPOST(body: SetOfIds, campaignId: number, sequenceId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<{ [key: string]: string; }>> {
            return CampaignApiFp(configuration).addContactsToCampaignSequenceUsingPOST(body, campaignId, sequenceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Achieves API goal for campaigns with matching integration, callName for a given contactId
         * @summary Achieve API Goal
         * @param {AchieveApiGoalEvent} body goalEvent
         * @param {string} callName callName
         * @param {string} integration integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAchieveApiGoalEventUsingPOST(body: AchieveApiGoalEvent, callName: string, integration: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GoalEventResultDTO>>> {
            return CampaignApiFp(configuration).createAchieveApiGoalEventUsingPOST(body, callName, integration, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single campaign
         * @summary Retrieve a Campaign
         * @param {number} campaignId campaignId
         * @param {Array<string>} [optionalProperties] Comma-delimited list of Campaign properties to include in the response. (The fields &#x60;goals&#x60; and &#x60;sequences&#x60; aren&#x27;t included, by default.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignUsingGET(campaignId: number, optionalProperties?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<CampaignWithStats>> {
            return CampaignApiFp(configuration).getCampaignUsingGET(campaignId, optionalProperties, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all campaigns for the authenticated user
         * @summary List Campaigns
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {string} [searchText] Optional text to search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCampaignsUsingGET(limit?: number, offset?: number, order?: string, orderDirection?: string, searchText?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CampaignList>> {
            return CampaignApiFp(configuration).listCampaignsUsingGET(limit, offset, order, orderDirection, searchText, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a single contact from a campaign sequence
         * @summary Remove from Campaign Sequence
         * @param {number} campaignId campaignId
         * @param {number} contactId contactId
         * @param {number} sequenceId sequenceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeContactFromCampaignSequenceUsingDELETE(campaignId: number, contactId: number, sequenceId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CampaignApiFp(configuration).removeContactFromCampaignSequenceUsingDELETE(campaignId, contactId, sequenceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a list of contacts from a campaign sequence
         * @summary Remove Multiple from Campaign Sequence
         * @param {SetOfIds} body ids
         * @param {number} campaignId campaignId
         * @param {number} sequenceId sequenceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeContactsFromCampaignSequenceUsingDELETE(body: SetOfIds, campaignId: number, sequenceId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CampaignApiFp(configuration).removeContactsFromCampaignSequenceUsingDELETE(body, campaignId, sequenceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CampaignApi - object-oriented interface
 * @export
 * @class CampaignApi
 * @extends {BaseAPI}
 */
export class CampaignApi extends BaseAPI {
    /**
     * Adds a single contact to a campaign sequence
     * @summary Add to Campaign Sequence
     * @param {number} campaignId campaignId
     * @param {number} contactId contactId
     * @param {number} sequenceId sequenceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public async addContactToCampaignSequenceUsingPOST(campaignId: number, contactId: number, sequenceId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CampaignApiFp(this.configuration).addContactToCampaignSequenceUsingPOST(campaignId, contactId, sequenceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Adds a list of contacts to a campaign sequence Response contains a map of the provided list of Contact Ids related to their individual result.
     * @summary Add Multiple to Campaign Sequence
     * @param {SetOfIds} body ids
     * @param {number} campaignId campaignId
     * @param {number} sequenceId sequenceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public async addContactsToCampaignSequenceUsingPOST(body: SetOfIds, campaignId: number, sequenceId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<{ [key: string]: string; }>> {
        return CampaignApiFp(this.configuration).addContactsToCampaignSequenceUsingPOST(body, campaignId, sequenceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Achieves API goal for campaigns with matching integration, callName for a given contactId
     * @summary Achieve API Goal
     * @param {AchieveApiGoalEvent} body goalEvent
     * @param {string} callName callName
     * @param {string} integration integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public async createAchieveApiGoalEventUsingPOST(body: AchieveApiGoalEvent, callName: string, integration: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GoalEventResultDTO>>> {
        return CampaignApiFp(this.configuration).createAchieveApiGoalEventUsingPOST(body, callName, integration, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a single campaign
     * @summary Retrieve a Campaign
     * @param {number} campaignId campaignId
     * @param {Array<string>} [optionalProperties] Comma-delimited list of Campaign properties to include in the response. (The fields &#x60;goals&#x60; and &#x60;sequences&#x60; aren&#x27;t included, by default.)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public async getCampaignUsingGET(campaignId: number, optionalProperties?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<CampaignWithStats>> {
        return CampaignApiFp(this.configuration).getCampaignUsingGET(campaignId, optionalProperties, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves all campaigns for the authenticated user
     * @summary List Campaigns
     * @param {number} [limit] Sets a total of items to return
     * @param {number} [offset] Sets a beginning range of items to return
     * @param {string} [order] Attribute to order items by
     * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
     * @param {string} [searchText] Optional text to search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public async listCampaignsUsingGET(limit?: number, offset?: number, order?: string, orderDirection?: string, searchText?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CampaignList>> {
        return CampaignApiFp(this.configuration).listCampaignsUsingGET(limit, offset, order, orderDirection, searchText, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Removes a single contact from a campaign sequence
     * @summary Remove from Campaign Sequence
     * @param {number} campaignId campaignId
     * @param {number} contactId contactId
     * @param {number} sequenceId sequenceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public async removeContactFromCampaignSequenceUsingDELETE(campaignId: number, contactId: number, sequenceId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CampaignApiFp(this.configuration).removeContactFromCampaignSequenceUsingDELETE(campaignId, contactId, sequenceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Removes a list of contacts from a campaign sequence
     * @summary Remove Multiple from Campaign Sequence
     * @param {SetOfIds} body ids
     * @param {number} campaignId campaignId
     * @param {number} sequenceId sequenceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public async removeContactsFromCampaignSequenceUsingDELETE(body: SetOfIds, campaignId: number, sequenceId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CampaignApiFp(this.configuration).removeContactsFromCampaignSequenceUsingDELETE(body, campaignId, sequenceId, options).then((request) => request(this.axios, this.basePath));
    }
}
