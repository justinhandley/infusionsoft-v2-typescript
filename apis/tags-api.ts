/* tslint:disable */
/* eslint-disable */
/**
 * Keap REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.70.0.655384-hf-202403291416
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateTag } from '../models';
import { CreateTagCategory } from '../models';
import { Entrylongstring } from '../models';
import { SetOfIds } from '../models';
import { Tag } from '../models';
import { TagCategory } from '../models';
import { TaggedCompanyList } from '../models';
import { TaggedContactList } from '../models';
import { Tags } from '../models';
/**
 * TagsApi - axios parameter creator
 * @export
 */
export const TagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Apply a tag to a list of contacts
         * @summary Apply Tag to Contacts
         * @param {SetOfIds} body ids
         * @param {number} tagId tagId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyTagToContactIdsUsingPOST: async (body: SetOfIds, tagId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling applyTagToContactIdsUsingPOST.');
            }
            // verify required parameter 'tagId' is not null or undefined
            if (tagId === null || tagId === undefined) {
                throw new RequiredError('tagId','Required parameter tagId was null or undefined when calling applyTagToContactIdsUsingPOST.');
            }
            const localVarPath = `/v1/tags/{tagId}/contacts`
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new tag category
         * @summary Create Tag Category
         * @param {CreateTagCategory} body tagCategory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTagCategoryUsingPOST: async (body: CreateTagCategory, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createTagCategoryUsingPOST.');
            }
            const localVarPath = `/v1/tags/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new tag
         * @summary Create Tag
         * @param {CreateTag} body tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTagUsingPOST: async (body: CreateTag, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createTagUsingPOST.');
            }
            const localVarPath = `/v1/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single tag
         * @summary Retrieve a Tag
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagUsingGET: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTagUsingGET.');
            }
            const localVarPath = `/v1/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of companies that have the given tag applied
         * @summary List Tagged Companies
         * @param {number} tagId tagId
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompaniesForTagIdUsingGET: async (tagId: number, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            if (tagId === null || tagId === undefined) {
                throw new RequiredError('tagId','Required parameter tagId was null or undefined when calling listCompaniesForTagIdUsingGET.');
            }
            const localVarPath = `/v1/tags/{tagId}/companies`
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of contacts that have the given tag applied
         * @summary List Tagged Contacts
         * @param {number} tagId tagId
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContactsForTagIdUsingGET: async (tagId: number, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            if (tagId === null || tagId === undefined) {
                throw new RequiredError('tagId','Required parameter tagId was null or undefined when calling listContactsForTagIdUsingGET.');
            }
            const localVarPath = `/v1/tags/{tagId}/contacts`
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of tags defined in the application
         * @summary List Tags
         * @param {number} [category] Category Id of tags to filter by
         * @param {number} [limit] Sets a total of items to return
         * @param {string} [name] Filter for tags with a specific name
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagsUsingGET: async (category?: number, limit?: number, name?: string, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a tag from a Contact
         * @summary Remove Tag from Contact
         * @param {number} contactId contactId
         * @param {number} tagId tagId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTagFromContactIdUsingDELETE: async (contactId: number, tagId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            if (contactId === null || contactId === undefined) {
                throw new RequiredError('contactId','Required parameter contactId was null or undefined when calling removeTagFromContactIdUsingDELETE.');
            }
            // verify required parameter 'tagId' is not null or undefined
            if (tagId === null || tagId === undefined) {
                throw new RequiredError('tagId','Required parameter tagId was null or undefined when calling removeTagFromContactIdUsingDELETE.');
            }
            const localVarPath = `/v1/tags/{tagId}/contacts/{contactId}`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)))
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a tag from a list of contacts
         * @summary Remove Tag from Contacts
         * @param {Array<number>} ids ids
         * @param {number} tagId tagId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTagFromContactIdsUsingDELETE: async (ids: Array<number>, tagId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new RequiredError('ids','Required parameter ids was null or undefined when calling removeTagFromContactIdsUsingDELETE.');
            }
            // verify required parameter 'tagId' is not null or undefined
            if (tagId === null || tagId === undefined) {
                throw new RequiredError('tagId','Required parameter tagId was null or undefined when calling removeTagFromContactIdsUsingDELETE.');
            }
            const localVarPath = `/v1/tags/{tagId}/contacts`
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagsApi - functional programming interface
 * @export
 */
export const TagsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Apply a tag to a list of contacts
         * @summary Apply Tag to Contacts
         * @param {SetOfIds} body ids
         * @param {number} tagId tagId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyTagToContactIdsUsingPOST(body: SetOfIds, tagId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Entrylongstring>>>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).applyTagToContactIdsUsingPOST(body, tagId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new tag category
         * @summary Create Tag Category
         * @param {CreateTagCategory} body tagCategory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTagCategoryUsingPOST(body: CreateTagCategory, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TagCategory>>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).createTagCategoryUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new tag
         * @summary Create Tag
         * @param {CreateTag} body tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTagUsingPOST(body: CreateTag, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tag>>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).createTagUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a single tag
         * @summary Retrieve a Tag
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTagUsingGET(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tag>>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).getTagUsingGET(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of companies that have the given tag applied
         * @summary List Tagged Companies
         * @param {number} tagId tagId
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCompaniesForTagIdUsingGET(tagId: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TaggedCompanyList>>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).listCompaniesForTagIdUsingGET(tagId, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of contacts that have the given tag applied
         * @summary List Tagged Contacts
         * @param {number} tagId tagId
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContactsForTagIdUsingGET(tagId: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TaggedContactList>>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).listContactsForTagIdUsingGET(tagId, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a list of tags defined in the application
         * @summary List Tags
         * @param {number} [category] Category Id of tags to filter by
         * @param {number} [limit] Sets a total of items to return
         * @param {string} [name] Filter for tags with a specific name
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTagsUsingGET(category?: number, limit?: number, name?: string, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tags>>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).listTagsUsingGET(category, limit, name, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove a tag from a Contact
         * @summary Remove Tag from Contact
         * @param {number} contactId contactId
         * @param {number} tagId tagId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTagFromContactIdUsingDELETE(contactId: number, tagId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).removeTagFromContactIdUsingDELETE(contactId, tagId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove a tag from a list of contacts
         * @summary Remove Tag from Contacts
         * @param {Array<number>} ids ids
         * @param {number} tagId tagId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTagFromContactIdsUsingDELETE(ids: Array<number>, tagId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).removeTagFromContactIdsUsingDELETE(ids, tagId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TagsApi - factory interface
 * @export
 */
export const TagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Apply a tag to a list of contacts
         * @summary Apply Tag to Contacts
         * @param {SetOfIds} body ids
         * @param {number} tagId tagId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyTagToContactIdsUsingPOST(body: SetOfIds, tagId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Entrylongstring>>> {
            return TagsApiFp(configuration).applyTagToContactIdsUsingPOST(body, tagId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new tag category
         * @summary Create Tag Category
         * @param {CreateTagCategory} body tagCategory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTagCategoryUsingPOST(body: CreateTagCategory, options?: AxiosRequestConfig): Promise<AxiosResponse<TagCategory>> {
            return TagsApiFp(configuration).createTagCategoryUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new tag
         * @summary Create Tag
         * @param {CreateTag} body tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTagUsingPOST(body: CreateTag, options?: AxiosRequestConfig): Promise<AxiosResponse<Tag>> {
            return TagsApiFp(configuration).createTagUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single tag
         * @summary Retrieve a Tag
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTagUsingGET(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Tag>> {
            return TagsApiFp(configuration).getTagUsingGET(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of companies that have the given tag applied
         * @summary List Tagged Companies
         * @param {number} tagId tagId
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCompaniesForTagIdUsingGET(tagId: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<TaggedCompanyList>> {
            return TagsApiFp(configuration).listCompaniesForTagIdUsingGET(tagId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of contacts that have the given tag applied
         * @summary List Tagged Contacts
         * @param {number} tagId tagId
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContactsForTagIdUsingGET(tagId: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<TaggedContactList>> {
            return TagsApiFp(configuration).listContactsForTagIdUsingGET(tagId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of tags defined in the application
         * @summary List Tags
         * @param {number} [category] Category Id of tags to filter by
         * @param {number} [limit] Sets a total of items to return
         * @param {string} [name] Filter for tags with a specific name
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTagsUsingGET(category?: number, limit?: number, name?: string, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Tags>> {
            return TagsApiFp(configuration).listTagsUsingGET(category, limit, name, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a tag from a Contact
         * @summary Remove Tag from Contact
         * @param {number} contactId contactId
         * @param {number} tagId tagId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTagFromContactIdUsingDELETE(contactId: number, tagId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return TagsApiFp(configuration).removeTagFromContactIdUsingDELETE(contactId, tagId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a tag from a list of contacts
         * @summary Remove Tag from Contacts
         * @param {Array<number>} ids ids
         * @param {number} tagId tagId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTagFromContactIdsUsingDELETE(ids: Array<number>, tagId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return TagsApiFp(configuration).removeTagFromContactIdsUsingDELETE(ids, tagId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TagsApi - object-oriented interface
 * @export
 * @class TagsApi
 * @extends {BaseAPI}
 */
export class TagsApi extends BaseAPI {
    /**
     * Apply a tag to a list of contacts
     * @summary Apply Tag to Contacts
     * @param {SetOfIds} body ids
     * @param {number} tagId tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public async applyTagToContactIdsUsingPOST(body: SetOfIds, tagId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Entrylongstring>>> {
        return TagsApiFp(this.configuration).applyTagToContactIdsUsingPOST(body, tagId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new tag category
     * @summary Create Tag Category
     * @param {CreateTagCategory} body tagCategory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public async createTagCategoryUsingPOST(body: CreateTagCategory, options?: AxiosRequestConfig) : Promise<AxiosResponse<TagCategory>> {
        return TagsApiFp(this.configuration).createTagCategoryUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new tag
     * @summary Create Tag
     * @param {CreateTag} body tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public async createTagUsingPOST(body: CreateTag, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tag>> {
        return TagsApiFp(this.configuration).createTagUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a single tag
     * @summary Retrieve a Tag
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public async getTagUsingGET(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tag>> {
        return TagsApiFp(this.configuration).getTagUsingGET(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of companies that have the given tag applied
     * @summary List Tagged Companies
     * @param {number} tagId tagId
     * @param {number} [limit] Sets a total of items to return
     * @param {number} [offset] Sets a beginning range of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public async listCompaniesForTagIdUsingGET(tagId: number, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<TaggedCompanyList>> {
        return TagsApiFp(this.configuration).listCompaniesForTagIdUsingGET(tagId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of contacts that have the given tag applied
     * @summary List Tagged Contacts
     * @param {number} tagId tagId
     * @param {number} [limit] Sets a total of items to return
     * @param {number} [offset] Sets a beginning range of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public async listContactsForTagIdUsingGET(tagId: number, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<TaggedContactList>> {
        return TagsApiFp(this.configuration).listContactsForTagIdUsingGET(tagId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a list of tags defined in the application
     * @summary List Tags
     * @param {number} [category] Category Id of tags to filter by
     * @param {number} [limit] Sets a total of items to return
     * @param {string} [name] Filter for tags with a specific name
     * @param {number} [offset] Sets a beginning range of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public async listTagsUsingGET(category?: number, limit?: number, name?: string, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tags>> {
        return TagsApiFp(this.configuration).listTagsUsingGET(category, limit, name, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a tag from a Contact
     * @summary Remove Tag from Contact
     * @param {number} contactId contactId
     * @param {number} tagId tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public async removeTagFromContactIdUsingDELETE(contactId: number, tagId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return TagsApiFp(this.configuration).removeTagFromContactIdUsingDELETE(contactId, tagId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a tag from a list of contacts
     * @summary Remove Tag from Contacts
     * @param {Array<number>} ids ids
     * @param {number} tagId tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public async removeTagFromContactIdsUsingDELETE(ids: Array<number>, tagId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return TagsApiFp(this.configuration).removeTagFromContactIdsUsingDELETE(ids, tagId, options).then((request) => request(this.axios, this.basePath));
    }
}
