/* tslint:disable */
/* eslint-disable */
/**
 * Keap REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.70.0.655384-hf-202403291416
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateProduct } from '../models';
import { CreateProductImage } from '../models';
import { CreateProductSubscription } from '../models';
import { Product } from '../models';
import { ProductList } from '../models';
import { ProductStatusList } from '../models';
import { ProductSubscription } from '../models';
/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Max payload 3 megabytes, the `file_data` is base64 encoded.
         * @summary Upload a product image
         * @param {CreateProductImage} body restProductImage
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductImageUsingPOST: async (body: CreateProductImage, productId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createProductImageUsingPOST.');
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling createProductImageUsingPOST.');
            }
            const localVarPath = `/v1/products/{productId}/image`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new product subscription
         * @summary Create a Product Subscription
         * @param {CreateProductSubscription} body createProductSubscription
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductSubscriptionUsingPOST: async (body: CreateProductSubscription, productId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createProductSubscriptionUsingPOST.');
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling createProductSubscriptionUsingPOST.');
            }
            const localVarPath = `/v1/products/{productId}/subscriptions`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new product
         * @summary Create a Product
         * @param {CreateProduct} body createProduct
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductUsingPOST: async (body: CreateProduct, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createProductUsingPOST.');
            }
            const localVarPath = `/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a product image
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductImageUsingDELETE: async (productId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling deleteProductImageUsingDELETE.');
            }
            const localVarPath = `/v1/products/{productId}/image`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a product subscription
         * @summary Delete a Product Subscription
         * @param {number} productId productId
         * @param {number} subscriptionId subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductSubscriptionUsingDELETE: async (productId: number, subscriptionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling deleteProductSubscriptionUsingDELETE.');
            }
            // verify required parameter 'subscriptionId' is not null or undefined
            if (subscriptionId === null || subscriptionId === undefined) {
                throw new RequiredError('subscriptionId','Required parameter subscriptionId was null or undefined when calling deleteProductSubscriptionUsingDELETE.');
            }
            const localVarPath = `/v1/products/{productId}/subscriptions/{subscriptionId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)))
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a product and its subscriptions
         * @summary Delete a Product
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductUsingDELETE: async (productId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling deleteProductUsingDELETE.');
            }
            const localVarPath = `/v1/products/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * The Sync endpoint returns a set of products that have been updated or created since the last result set was retrieved, minus any products that have been deleted.
         * @summary Retrieve Synced Products
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [syncToken] sync_token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductsFromSyncTokenUsingGET: async (limit?: number, offset?: number, syncToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/products/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (syncToken !== undefined) {
                localVarQueryParameter['sync_token'] = syncToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all products
         * @summary List Products
         * @param {boolean} [active] Sets status of items to return
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductsUsingGET: async (active?: boolean, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a Product Subscription
         * @param {number} productId productId
         * @param {number} subscriptionId subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveProductSubscriptionUsingGET: async (productId: number, subscriptionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling retrieveProductSubscriptionUsingGET.');
            }
            // verify required parameter 'subscriptionId' is not null or undefined
            if (subscriptionId === null || subscriptionId === undefined) {
                throw new RequiredError('subscriptionId','Required parameter subscriptionId was null or undefined when calling retrieveProductSubscriptionUsingGET.');
            }
            const localVarPath = `/v1/products/{productId}/subscriptions/{subscriptionId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)))
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a Product
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveProductUsingGET: async (productId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling retrieveProductUsingGET.');
            }
            const localVarPath = `/v1/products/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Product with only the values provided in the request.
         * @summary Update a Product
         * @param {CreateProduct} body createProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductUsingPATCH: async (body: CreateProduct, productId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateProductUsingPATCH.');
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling updateProductUsingPATCH.');
            }
            const localVarPath = `/v1/products/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Max payload 3 megabytes, the `file_data` is base64 encoded.
         * @summary Upload a product image
         * @param {CreateProductImage} body restProductImage
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProductImageUsingPOST(body: CreateProductImage, productId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductApiAxiosParamCreator(configuration).createProductImageUsingPOST(body, productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new product subscription
         * @summary Create a Product Subscription
         * @param {CreateProductSubscription} body createProductSubscription
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProductSubscriptionUsingPOST(body: CreateProductSubscription, productId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ProductSubscription>>> {
            const localVarAxiosArgs = await ProductApiAxiosParamCreator(configuration).createProductSubscriptionUsingPOST(body, productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new product
         * @summary Create a Product
         * @param {CreateProduct} body createProduct
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProductUsingPOST(body: CreateProduct, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Product>>> {
            const localVarAxiosArgs = await ProductApiAxiosParamCreator(configuration).createProductUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete a product image
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductImageUsingDELETE(productId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductApiAxiosParamCreator(configuration).deleteProductImageUsingDELETE(productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a product subscription
         * @summary Delete a Product Subscription
         * @param {number} productId productId
         * @param {number} subscriptionId subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductSubscriptionUsingDELETE(productId: number, subscriptionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductApiAxiosParamCreator(configuration).deleteProductSubscriptionUsingDELETE(productId, subscriptionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a product and its subscriptions
         * @summary Delete a Product
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductUsingDELETE(productId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductApiAxiosParamCreator(configuration).deleteProductUsingDELETE(productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * The Sync endpoint returns a set of products that have been updated or created since the last result set was retrieved, minus any products that have been deleted.
         * @summary Retrieve Synced Products
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [syncToken] sync_token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProductsFromSyncTokenUsingGET(limit?: number, offset?: number, syncToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ProductStatusList>>> {
            const localVarAxiosArgs = await ProductApiAxiosParamCreator(configuration).listProductsFromSyncTokenUsingGET(limit, offset, syncToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of all products
         * @summary List Products
         * @param {boolean} [active] Sets status of items to return
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProductsUsingGET(active?: boolean, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ProductList>>> {
            const localVarAxiosArgs = await ProductApiAxiosParamCreator(configuration).listProductsUsingGET(active, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieve a Product Subscription
         * @param {number} productId productId
         * @param {number} subscriptionId subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveProductSubscriptionUsingGET(productId: number, subscriptionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ProductSubscription>>> {
            const localVarAxiosArgs = await ProductApiAxiosParamCreator(configuration).retrieveProductSubscriptionUsingGET(productId, subscriptionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieve a Product
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveProductUsingGET(productId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Product>>> {
            const localVarAxiosArgs = await ProductApiAxiosParamCreator(configuration).retrieveProductUsingGET(productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a Product with only the values provided in the request.
         * @summary Update a Product
         * @param {CreateProduct} body createProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProductUsingPATCH(body: CreateProduct, productId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Product>>> {
            const localVarAxiosArgs = await ProductApiAxiosParamCreator(configuration).updateProductUsingPATCH(body, productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Max payload 3 megabytes, the `file_data` is base64 encoded.
         * @summary Upload a product image
         * @param {CreateProductImage} body restProductImage
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProductImageUsingPOST(body: CreateProductImage, productId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductApiFp(configuration).createProductImageUsingPOST(body, productId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new product subscription
         * @summary Create a Product Subscription
         * @param {CreateProductSubscription} body createProductSubscription
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProductSubscriptionUsingPOST(body: CreateProductSubscription, productId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ProductSubscription>> {
            return ProductApiFp(configuration).createProductSubscriptionUsingPOST(body, productId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new product
         * @summary Create a Product
         * @param {CreateProduct} body createProduct
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProductUsingPOST(body: CreateProduct, options?: AxiosRequestConfig): Promise<AxiosResponse<Product>> {
            return ProductApiFp(configuration).createProductUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a product image
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductImageUsingDELETE(productId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductApiFp(configuration).deleteProductImageUsingDELETE(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a product subscription
         * @summary Delete a Product Subscription
         * @param {number} productId productId
         * @param {number} subscriptionId subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductSubscriptionUsingDELETE(productId: number, subscriptionId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductApiFp(configuration).deleteProductSubscriptionUsingDELETE(productId, subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a product and its subscriptions
         * @summary Delete a Product
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductUsingDELETE(productId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductApiFp(configuration).deleteProductUsingDELETE(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * The Sync endpoint returns a set of products that have been updated or created since the last result set was retrieved, minus any products that have been deleted.
         * @summary Retrieve Synced Products
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {string} [syncToken] sync_token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProductsFromSyncTokenUsingGET(limit?: number, offset?: number, syncToken?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ProductStatusList>> {
            return ProductApiFp(configuration).listProductsFromSyncTokenUsingGET(limit, offset, syncToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all products
         * @summary List Products
         * @param {boolean} [active] Sets status of items to return
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProductsUsingGET(active?: boolean, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ProductList>> {
            return ProductApiFp(configuration).listProductsUsingGET(active, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a Product Subscription
         * @param {number} productId productId
         * @param {number} subscriptionId subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveProductSubscriptionUsingGET(productId: number, subscriptionId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ProductSubscription>> {
            return ProductApiFp(configuration).retrieveProductSubscriptionUsingGET(productId, subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a Product
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveProductUsingGET(productId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Product>> {
            return ProductApiFp(configuration).retrieveProductUsingGET(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a Product with only the values provided in the request.
         * @summary Update a Product
         * @param {CreateProduct} body createProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProductUsingPATCH(body: CreateProduct, productId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Product>> {
            return ProductApiFp(configuration).updateProductUsingPATCH(body, productId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * Max payload 3 megabytes, the `file_data` is base64 encoded.
     * @summary Upload a product image
     * @param {CreateProductImage} body restProductImage
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public async createProductImageUsingPOST(body: CreateProductImage, productId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProductApiFp(this.configuration).createProductImageUsingPOST(body, productId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new product subscription
     * @summary Create a Product Subscription
     * @param {CreateProductSubscription} body createProductSubscription
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public async createProductSubscriptionUsingPOST(body: CreateProductSubscription, productId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ProductSubscription>> {
        return ProductApiFp(this.configuration).createProductSubscriptionUsingPOST(body, productId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new product
     * @summary Create a Product
     * @param {CreateProduct} body createProduct
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public async createProductUsingPOST(body: CreateProduct, options?: AxiosRequestConfig) : Promise<AxiosResponse<Product>> {
        return ProductApiFp(this.configuration).createProductUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete a product image
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public async deleteProductImageUsingDELETE(productId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProductApiFp(this.configuration).deleteProductImageUsingDELETE(productId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a product subscription
     * @summary Delete a Product Subscription
     * @param {number} productId productId
     * @param {number} subscriptionId subscriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public async deleteProductSubscriptionUsingDELETE(productId: number, subscriptionId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProductApiFp(this.configuration).deleteProductSubscriptionUsingDELETE(productId, subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a product and its subscriptions
     * @summary Delete a Product
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public async deleteProductUsingDELETE(productId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProductApiFp(this.configuration).deleteProductUsingDELETE(productId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The Sync endpoint returns a set of products that have been updated or created since the last result set was retrieved, minus any products that have been deleted.
     * @summary Retrieve Synced Products
     * @param {number} [limit] Sets a total of items to return
     * @param {number} [offset] Sets a beginning range of items to return
     * @param {string} [syncToken] sync_token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public async listProductsFromSyncTokenUsingGET(limit?: number, offset?: number, syncToken?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ProductStatusList>> {
        return ProductApiFp(this.configuration).listProductsFromSyncTokenUsingGET(limit, offset, syncToken, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of all products
     * @summary List Products
     * @param {boolean} [active] Sets status of items to return
     * @param {number} [limit] Sets a total of items to return
     * @param {number} [offset] Sets a beginning range of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public async listProductsUsingGET(active?: boolean, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ProductList>> {
        return ProductApiFp(this.configuration).listProductsUsingGET(active, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieve a Product Subscription
     * @param {number} productId productId
     * @param {number} subscriptionId subscriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public async retrieveProductSubscriptionUsingGET(productId: number, subscriptionId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ProductSubscription>> {
        return ProductApiFp(this.configuration).retrieveProductSubscriptionUsingGET(productId, subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieve a Product
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public async retrieveProductUsingGET(productId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Product>> {
        return ProductApiFp(this.configuration).retrieveProductUsingGET(productId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a Product with only the values provided in the request.
     * @summary Update a Product
     * @param {CreateProduct} body createProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public async updateProductUsingPATCH(body: CreateProduct, productId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Product>> {
        return ProductApiFp(this.configuration).updateProductUsingPATCH(body, productId, options).then((request) => request(this.axios, this.basePath));
    }
}
