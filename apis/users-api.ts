/* tslint:disable */
/* eslint-disable */
/**
 * Keap REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.70.0.655384-hf-202403291416
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateUser } from '../models';
import { RestUser } from '../models';
import { Users } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new user record. NB: Users will be invited to the application and remain in the \"Invited\" status until the user accepts the invite. \"Inactive\" users will not take up a user license.
         * @summary Create a User
         * @param {CreateUser} [body] user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsingPOST: async (body?: CreateUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a HTML snippet that contains the user's email signature.
         * @summary Get User email signature
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSignatureUsingGET: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserSignatureUsingGET.');
            }
            const localVarPath = `/v1/users/{userId}/signature`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all users
         * @summary List Users
         * @param {boolean} [includeInactive] Include users that are Inactive in results, defaults to TRUE
         * @param {boolean} [includePartners] Include partner users in results, defaults to TRUE
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsersUsingGET: async (includeInactive?: boolean, includePartners?: boolean, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeInactive !== undefined) {
                localVarQueryParameter['include_inactive'] = includeInactive;
            }

            if (includePartners !== undefined) {
                localVarQueryParameter['include_partners'] = includePartners;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new user record. NB: Users will be invited to the application and remain in the \"Invited\" status until the user accepts the invite. \"Inactive\" users will not take up a user license.
         * @summary Create a User
         * @param {CreateUser} [body] user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserUsingPOST(body?: CreateUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RestUser>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).createUserUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a HTML snippet that contains the user's email signature.
         * @summary Get User email signature
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserSignatureUsingGET(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).getUserSignatureUsingGET(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of all users
         * @summary List Users
         * @param {boolean} [includeInactive] Include users that are Inactive in results, defaults to TRUE
         * @param {boolean} [includePartners] Include partner users in results, defaults to TRUE
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsersUsingGET(includeInactive?: boolean, includePartners?: boolean, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Users>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).listUsersUsingGET(includeInactive, includePartners, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new user record. NB: Users will be invited to the application and remain in the \"Invited\" status until the user accepts the invite. \"Inactive\" users will not take up a user license.
         * @summary Create a User
         * @param {CreateUser} [body] user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserUsingPOST(body?: CreateUser, options?: AxiosRequestConfig): Promise<AxiosResponse<RestUser>> {
            return UsersApiFp(configuration).createUserUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a HTML snippet that contains the user's email signature.
         * @summary Get User email signature
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserSignatureUsingGET(userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return UsersApiFp(configuration).getUserSignatureUsingGET(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all users
         * @summary List Users
         * @param {boolean} [includeInactive] Include users that are Inactive in results, defaults to TRUE
         * @param {boolean} [includePartners] Include partner users in results, defaults to TRUE
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsersUsingGET(includeInactive?: boolean, includePartners?: boolean, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Users>> {
            return UsersApiFp(configuration).listUsersUsingGET(includeInactive, includePartners, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Creates a new user record. NB: Users will be invited to the application and remain in the \"Invited\" status until the user accepts the invite. \"Inactive\" users will not take up a user license.
     * @summary Create a User
     * @param {CreateUser} [body] user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async createUserUsingPOST(body?: CreateUser, options?: AxiosRequestConfig) : Promise<AxiosResponse<RestUser>> {
        return UsersApiFp(this.configuration).createUserUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a HTML snippet that contains the user's email signature.
     * @summary Get User email signature
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async getUserSignatureUsingGET(userId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return UsersApiFp(this.configuration).getUserSignatureUsingGET(userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of all users
     * @summary List Users
     * @param {boolean} [includeInactive] Include users that are Inactive in results, defaults to TRUE
     * @param {boolean} [includePartners] Include partner users in results, defaults to TRUE
     * @param {number} [limit] Sets a total of items to return
     * @param {number} [offset] Sets a beginning range of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async listUsersUsingGET(includeInactive?: boolean, includePartners?: boolean, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Users>> {
        return UsersApiFp(this.configuration).listUsersUsingGET(includeInactive, includePartners, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}
