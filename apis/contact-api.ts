/* tslint:disable */
/* eslint-disable */
/**
 * Keap REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.70.0.655384-hf-202403291416
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ContactCreditCard } from '../models';
import { ContactList } from '../models';
import { ContactTagList } from '../models';
import { CreateOrPatchContact } from '../models';
import { CreateRestCustomField } from '../models';
import { CreateUtmContact } from '../models';
import { CreditCard } from '../models';
import { CreditCardAdded } from '../models';
import { CustomFieldMetaData } from '../models';
import { EmailSentCreate } from '../models';
import { EmailSentQueryResultList } from '../models';
import { Entrylongstring } from '../models';
import { FullContact } from '../models';
import { FullUtm } from '../models';
import { ObjectModel } from '../models';
import { TagId } from '../models';
import { UpsertContact } from '../models';
/**
 * ContactApi - axios parameter creator
 * @export
 */
export const ContactApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Apply a list of tags to a given contact record
         * @summary Apply Tags
         * @param {TagId} body tagIds
         * @param {number} contactId contactId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyTagsToContactIdUsingPOST: async (body: TagId, contactId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling applyTagsToContactIdUsingPOST.');
            }
            // verify required parameter 'contactId' is not null or undefined
            if (contactId === null || contactId === undefined) {
                throw new RequiredError('contactId','Required parameter contactId was null or undefined when calling applyTagsToContactIdUsingPOST.');
            }
            const localVarPath = `/v1/contacts/{contactId}/tags`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new contact as the authenticated user. NB: Contact must contain at least one item in `email_addresses` or `phone_numbers` and `country_code` is required if `region` is specified.  Please see the body schema for updates to the postal code field.  You may opt-in or mark a Contact as _Marketable_ by including the following field in the request JSON with an opt-in reason. (This field is also shown in the complete request body sample.) The reason you provide here will help with compliance. Example reasons: \"Customer opted-in through webform\", \"Contact gave explicit permission.\"  ```json \"opt_in_reason\": \"your reason for opt-in\" ``` Note that the email address status will only be updated to unconfirmed (marketable) for email addresses that are currently in the following states: Unengaged Marketable Unengaged Non-Marketable Non-Marketable Opt-Out: Manual All other existing statuses e.g. List Unsubscribe, Opt-Out System etc will remain non-marketable and in their existing state.  This API only supports a subset of valid timezones. A list of the supported timezones can be found [here](https://developer.infusionsoft.com/faqs/what-timezones-do-contact-calls-accept/).
         * @summary Create a Contact
         * @param {CreateOrPatchContact} [body] contact
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContactUsingPOST: async (body?: CreateOrPatchContact, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new credit card associated to a contact
         * @summary Create a Credit Card
         * @param {number} contactId contactId
         * @param {CreditCard} [body] creditCard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCreditCardUsingPOST: async (contactId: number, body?: CreditCard, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            if (contactId === null || contactId === undefined) {
                throw new RequiredError('contactId','Required parameter contactId was null or undefined when calling createCreditCardUsingPOST.');
            }
            const localVarPath = `/v1/contacts/{contactId}/creditCards`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a custom field of the specified type and options to the Contact object.
         * @summary Create a Custom Field
         * @param {CreateRestCustomField} body customField
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomFieldUsingPOST: async (body: CreateRestCustomField, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createCustomFieldUsingPOST.');
            }
            const localVarPath = `/v1/contacts/model/customFields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a record of an email sent to a contact
         * @summary Create an Email Record
         * @param {number} contactId contactId
         * @param {EmailSentCreate} [body] Email records to persist, with content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailForContactUsingPOST: async (contactId: number, body?: EmailSentCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            if (contactId === null || contactId === undefined) {
                throw new RequiredError('contactId','Required parameter contactId was null or undefined when calling createEmailForContactUsingPOST.');
            }
            const localVarPath = `/v1/contacts/{contactId}/emails`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new contact or updates a contact as the authenticated user. NB: New Contacts must contain at least one item in `email_addresses` or `phone_numbers` and `country_code` is required if `region` is specified. Existing Contacts are updated with only the values provided in the request. Accepts a `duplicate_option` which performs duplicate checking by one of the following options: `Email`, `EmailAndName`, if a match is found using the option provided, the existing contact will be updated. If an existing contact was not found using the `duplicate_option` provided, a new contact record will be created.  You may opt-in or mark a Contact as _Marketable_ by including the following field in the request JSON with an opt-in reason. (This field is also shown in the complete request body sample.) The reason you provide here will help with compliance. Example reasons: \"Customer opted-in through webform\", \"Contact gave explicit permission.\"  ```json \"opt_in_reason\": \"your reason for opt-in\" ``` Note that the email address status will only be updated to unconfirmed (marketable) for email addresses that are currently in the following states: Unengaged Marketable Unengaged Non-Marketable Non-Marketable Opt-Out: Manual All other existing statuses e.g. List Unsubscribe, Opt-Out System etc will remain non-marketable and in their existing state.  This API only supports a subset of valid timezones. A list of the supported timezones can be found [here](https://developer.infusionsoft.com/faqs/what-timezones-do-contact-calls-accept/).
         * @summary Create or Update a Contact
         * @param {UpsertContact} [body] contact
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdateContactUsingPUT: async (body?: UpsertContact, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specified contact.
         * @summary Delete a Contact
         * @param {number} contactId contactId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContactUsingDELETE: async (contactId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            if (contactId === null || contactId === undefined) {
                throw new RequiredError('contactId','Required parameter contactId was null or undefined when calling deleteContactUsingDELETE.');
            }
            const localVarPath = `/v1/contacts/{contactId}`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single contact
         * @summary Retrieve a Contact
         * @param {number} id id
         * @param {Array<string>} [optionalProperties] Comma-delimited list of Contact properties to include in the response. (Some fields such as &#x60;lead_source_id&#x60;, &#x60;custom_fields&#x60;, and &#x60;job_title&#x60; aren&#x27;t included, by default.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactUsingGET: async (id: number, optionalProperties?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getContactUsingGET.');
            }
            const localVarPath = `/v1/contacts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (optionalProperties) {
                localVarQueryParameter['optional_properties'] = optionalProperties;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Inserts UTMs for the contact specified by the contactId. The authenticated user must have permission to modify the contact utm info
         * @summary Insert UTMs for a Contact
         * @param {number} contactId ID of the contact to insert UTMs for
         * @param {CreateUtmContact} [body] UTM parameters to insert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertUTMsUsingPOST: async (contactId: number, body?: CreateUtmContact, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            if (contactId === null || contactId === undefined) {
                throw new RequiredError('contactId','Required parameter contactId was null or undefined when calling insertUTMsUsingPOST.');
            }
            const localVarPath = `/v1/contacts/{contactId}/utm`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of tags applied to a given contact
         * @summary List Applied Tags
         * @param {number} contactId contactId
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppliedTagsUsingGET: async (contactId: number, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            if (contactId === null || contactId === undefined) {
                throw new RequiredError('contactId','Required parameter contactId was null or undefined when calling listAppliedTagsUsingGET.');
            }
            const localVarPath = `/v1/contacts/{contactId}/tags`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all contacts
         * @summary List Contacts
         * @param {string} [email] Optional email address to query on
         * @param {string} [familyName] Optional last name or surname to query on
         * @param {string} [givenName] Optional first name or forename to query on
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {Array<string>} [optionalProperties] Comma-delimited list of Contact properties to include in the response. (Some fields such as &#x60;lead_source_id&#x60;, &#x60;custom_fields&#x60;, and &#x60;job_title&#x60; aren&#x27;t included, by default.)
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {string} [since] Date to start searching from on LastUpdated ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to on LastUpdated ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContactsUsingGET: async (email?: string, familyName?: string, givenName?: string, limit?: number, offset?: number, optionalProperties?: Array<string>, order?: string, orderDirection?: string, since?: string, until?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (familyName !== undefined) {
                localVarQueryParameter['family_name'] = familyName;
            }

            if (givenName !== undefined) {
                localVarQueryParameter['given_name'] = givenName;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optionalProperties) {
                localVarQueryParameter['optional_properties'] = optionalProperties;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (orderDirection !== undefined) {
                localVarQueryParameter['order_direction'] = orderDirection;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all Credit Cards on a contact
         * @summary Retrieve Credit Cards
         * @param {number} contactId contactId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCreditCardsUsingGET: async (contactId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            if (contactId === null || contactId === undefined) {
                throw new RequiredError('contactId','Required parameter contactId was null or undefined when calling listCreditCardsUsingGET.');
            }
            const localVarPath = `/v1/contacts/{contactId}/creditCards`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List Emails that have been sent to a Contact
         * @summary List Emails
         * @param {number} contactId contactId
         * @param {string} [email] Optional email address to query on
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmailsForContactUsingGET: async (contactId: number, email?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            if (contactId === null || contactId === undefined) {
                throw new RequiredError('contactId','Required parameter contactId was null or undefined when calling listEmailsForContactUsingGET.');
            }
            const localVarPath = `/v1/contacts/{contactId}/emails`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a list of tags from the given contact. Provide one or more tag ids in the querystring as a comma-separated URIencoded list (%2C is a comma). E.g. DELETE /contacts/{contact_id}/tags?ids=1%2C2%2C3
         * @summary Remove Applied Tags
         * @param {number} contactId contactId
         * @param {string} ids ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTagsFromContactUsingDELETE: async (contactId: number, ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            if (contactId === null || contactId === undefined) {
                throw new RequiredError('contactId','Required parameter contactId was null or undefined when calling removeTagsFromContactUsingDELETE.');
            }
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new RequiredError('ids','Required parameter ids was null or undefined when calling removeTagsFromContactUsingDELETE.');
            }
            const localVarPath = `/v1/contacts/{contactId}/tags`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a tag from the given contact
         * @summary Remove Applied Tag
         * @param {number} contactId contactId
         * @param {number} tagId tagId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTagsFromContactUsingDELETE1: async (contactId: number, tagId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            if (contactId === null || contactId === undefined) {
                throw new RequiredError('contactId','Required parameter contactId was null or undefined when calling removeTagsFromContactUsingDELETE1.');
            }
            // verify required parameter 'tagId' is not null or undefined
            if (tagId === null || tagId === undefined) {
                throw new RequiredError('tagId','Required parameter tagId was null or undefined when calling removeTagsFromContactUsingDELETE1.');
            }
            const localVarPath = `/v1/contacts/{contactId}/tags/{tagId}`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)))
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the custom fields and optional properties for the Contact object
         * @summary Retrieve Contact Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveContactModelUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/contacts/model`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a contact with only the values provided in the request.  You may opt-in or mark a Contact as _Marketable_ by including the following field in the request JSON with an opt-in reason. (This field is also shown in the complete request body sample.) The reason you provide here will help with compliance. Example reasons: \"Customer opted-in through webform\", \"Contact gave explicit permission.\"  ```json \"opt_in_reason\": \"your reason for opt-in\" ``` Note that the email address status will only be updated to unconfirmed (marketable) for email addresses that are currently in the following states: Unengaged Marketable Unengaged Non-Marketable Non-Marketable Opt-Out: Manual All other existing statuses e.g. List Unsubscribe, Opt-Out System etc will remain non-marketable and in their existing state.
         * @summary Update a Contact
         * @param {number} contactId contactId
         * @param {CreateOrPatchContact} [body] contact
         * @param {Array<string>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePropertiesOnContactUsingPATCH: async (contactId: number, body?: CreateOrPatchContact, updateMask?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            if (contactId === null || contactId === undefined) {
                throw new RequiredError('contactId','Required parameter contactId was null or undefined when calling updatePropertiesOnContactUsingPATCH.');
            }
            const localVarPath = `/v1/contacts/{contactId}`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (updateMask) {
                localVarQueryParameter['update_mask'] = updateMask;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactApi - functional programming interface
 * @export
 */
export const ContactApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Apply a list of tags to a given contact record
         * @summary Apply Tags
         * @param {TagId} body tagIds
         * @param {number} contactId contactId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyTagsToContactIdUsingPOST(body: TagId, contactId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Entrylongstring>>>> {
            const localVarAxiosArgs = await ContactApiAxiosParamCreator(configuration).applyTagsToContactIdUsingPOST(body, contactId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new contact as the authenticated user. NB: Contact must contain at least one item in `email_addresses` or `phone_numbers` and `country_code` is required if `region` is specified.  Please see the body schema for updates to the postal code field.  You may opt-in or mark a Contact as _Marketable_ by including the following field in the request JSON with an opt-in reason. (This field is also shown in the complete request body sample.) The reason you provide here will help with compliance. Example reasons: \"Customer opted-in through webform\", \"Contact gave explicit permission.\"  ```json \"opt_in_reason\": \"your reason for opt-in\" ``` Note that the email address status will only be updated to unconfirmed (marketable) for email addresses that are currently in the following states: Unengaged Marketable Unengaged Non-Marketable Non-Marketable Opt-Out: Manual All other existing statuses e.g. List Unsubscribe, Opt-Out System etc will remain non-marketable and in their existing state.  This API only supports a subset of valid timezones. A list of the supported timezones can be found [here](https://developer.infusionsoft.com/faqs/what-timezones-do-contact-calls-accept/).
         * @summary Create a Contact
         * @param {CreateOrPatchContact} [body] contact
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContactUsingPOST(body?: CreateOrPatchContact, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FullContact>>> {
            const localVarAxiosArgs = await ContactApiAxiosParamCreator(configuration).createContactUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new credit card associated to a contact
         * @summary Create a Credit Card
         * @param {number} contactId contactId
         * @param {CreditCard} [body] creditCard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCreditCardUsingPOST(contactId: number, body?: CreditCard, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CreditCardAdded>>> {
            const localVarAxiosArgs = await ContactApiAxiosParamCreator(configuration).createCreditCardUsingPOST(contactId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a custom field of the specified type and options to the Contact object.
         * @summary Create a Custom Field
         * @param {CreateRestCustomField} body customField
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCustomFieldUsingPOST(body: CreateRestCustomField, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomFieldMetaData>>> {
            const localVarAxiosArgs = await ContactApiAxiosParamCreator(configuration).createCustomFieldUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a record of an email sent to a contact
         * @summary Create an Email Record
         * @param {number} contactId contactId
         * @param {EmailSentCreate} [body] Email records to persist, with content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmailForContactUsingPOST(contactId: number, body?: EmailSentCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<EmailSentCreate>>> {
            const localVarAxiosArgs = await ContactApiAxiosParamCreator(configuration).createEmailForContactUsingPOST(contactId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new contact or updates a contact as the authenticated user. NB: New Contacts must contain at least one item in `email_addresses` or `phone_numbers` and `country_code` is required if `region` is specified. Existing Contacts are updated with only the values provided in the request. Accepts a `duplicate_option` which performs duplicate checking by one of the following options: `Email`, `EmailAndName`, if a match is found using the option provided, the existing contact will be updated. If an existing contact was not found using the `duplicate_option` provided, a new contact record will be created.  You may opt-in or mark a Contact as _Marketable_ by including the following field in the request JSON with an opt-in reason. (This field is also shown in the complete request body sample.) The reason you provide here will help with compliance. Example reasons: \"Customer opted-in through webform\", \"Contact gave explicit permission.\"  ```json \"opt_in_reason\": \"your reason for opt-in\" ``` Note that the email address status will only be updated to unconfirmed (marketable) for email addresses that are currently in the following states: Unengaged Marketable Unengaged Non-Marketable Non-Marketable Opt-Out: Manual All other existing statuses e.g. List Unsubscribe, Opt-Out System etc will remain non-marketable and in their existing state.  This API only supports a subset of valid timezones. A list of the supported timezones can be found [here](https://developer.infusionsoft.com/faqs/what-timezones-do-contact-calls-accept/).
         * @summary Create or Update a Contact
         * @param {UpsertContact} [body] contact
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrUpdateContactUsingPUT(body?: UpsertContact, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FullContact>>> {
            const localVarAxiosArgs = await ContactApiAxiosParamCreator(configuration).createOrUpdateContactUsingPUT(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes the specified contact.
         * @summary Delete a Contact
         * @param {number} contactId contactId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContactUsingDELETE(contactId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ContactApiAxiosParamCreator(configuration).deleteContactUsingDELETE(contactId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a single contact
         * @summary Retrieve a Contact
         * @param {number} id id
         * @param {Array<string>} [optionalProperties] Comma-delimited list of Contact properties to include in the response. (Some fields such as &#x60;lead_source_id&#x60;, &#x60;custom_fields&#x60;, and &#x60;job_title&#x60; aren&#x27;t included, by default.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContactUsingGET(id: number, optionalProperties?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FullContact>>> {
            const localVarAxiosArgs = await ContactApiAxiosParamCreator(configuration).getContactUsingGET(id, optionalProperties, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Inserts UTMs for the contact specified by the contactId. The authenticated user must have permission to modify the contact utm info
         * @summary Insert UTMs for a Contact
         * @param {number} contactId ID of the contact to insert UTMs for
         * @param {CreateUtmContact} [body] UTM parameters to insert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertUTMsUsingPOST(contactId: number, body?: CreateUtmContact, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FullUtm>>> {
            const localVarAxiosArgs = await ContactApiAxiosParamCreator(configuration).insertUTMsUsingPOST(contactId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of tags applied to a given contact
         * @summary List Applied Tags
         * @param {number} contactId contactId
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAppliedTagsUsingGET(contactId: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ContactTagList>>> {
            const localVarAxiosArgs = await ContactApiAxiosParamCreator(configuration).listAppliedTagsUsingGET(contactId, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of all contacts
         * @summary List Contacts
         * @param {string} [email] Optional email address to query on
         * @param {string} [familyName] Optional last name or surname to query on
         * @param {string} [givenName] Optional first name or forename to query on
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {Array<string>} [optionalProperties] Comma-delimited list of Contact properties to include in the response. (Some fields such as &#x60;lead_source_id&#x60;, &#x60;custom_fields&#x60;, and &#x60;job_title&#x60; aren&#x27;t included, by default.)
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {string} [since] Date to start searching from on LastUpdated ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to on LastUpdated ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContactsUsingGET(email?: string, familyName?: string, givenName?: string, limit?: number, offset?: number, optionalProperties?: Array<string>, order?: string, orderDirection?: string, since?: string, until?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ContactList>>> {
            const localVarAxiosArgs = await ContactApiAxiosParamCreator(configuration).listContactsUsingGET(email, familyName, givenName, limit, offset, optionalProperties, order, orderDirection, since, until, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all Credit Cards on a contact
         * @summary Retrieve Credit Cards
         * @param {number} contactId contactId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCreditCardsUsingGET(contactId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ContactCreditCard>>>> {
            const localVarAxiosArgs = await ContactApiAxiosParamCreator(configuration).listCreditCardsUsingGET(contactId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List Emails that have been sent to a Contact
         * @summary List Emails
         * @param {number} contactId contactId
         * @param {string} [email] Optional email address to query on
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmailsForContactUsingGET(contactId: number, email?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<EmailSentQueryResultList>>> {
            const localVarAxiosArgs = await ContactApiAxiosParamCreator(configuration).listEmailsForContactUsingGET(contactId, email, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Removes a list of tags from the given contact. Provide one or more tag ids in the querystring as a comma-separated URIencoded list (%2C is a comma). E.g. DELETE /contacts/{contact_id}/tags?ids=1%2C2%2C3
         * @summary Remove Applied Tags
         * @param {number} contactId contactId
         * @param {string} ids ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTagsFromContactUsingDELETE(contactId: number, ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ContactApiAxiosParamCreator(configuration).removeTagsFromContactUsingDELETE(contactId, ids, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Removes a tag from the given contact
         * @summary Remove Applied Tag
         * @param {number} contactId contactId
         * @param {number} tagId tagId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTagsFromContactUsingDELETE1(contactId: number, tagId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ContactApiAxiosParamCreator(configuration).removeTagsFromContactUsingDELETE1(contactId, tagId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the custom fields and optional properties for the Contact object
         * @summary Retrieve Contact Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveContactModelUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ObjectModel>>> {
            const localVarAxiosArgs = await ContactApiAxiosParamCreator(configuration).retrieveContactModelUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a contact with only the values provided in the request.  You may opt-in or mark a Contact as _Marketable_ by including the following field in the request JSON with an opt-in reason. (This field is also shown in the complete request body sample.) The reason you provide here will help with compliance. Example reasons: \"Customer opted-in through webform\", \"Contact gave explicit permission.\"  ```json \"opt_in_reason\": \"your reason for opt-in\" ``` Note that the email address status will only be updated to unconfirmed (marketable) for email addresses that are currently in the following states: Unengaged Marketable Unengaged Non-Marketable Non-Marketable Opt-Out: Manual All other existing statuses e.g. List Unsubscribe, Opt-Out System etc will remain non-marketable and in their existing state.
         * @summary Update a Contact
         * @param {number} contactId contactId
         * @param {CreateOrPatchContact} [body] contact
         * @param {Array<string>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePropertiesOnContactUsingPATCH(contactId: number, body?: CreateOrPatchContact, updateMask?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FullContact>>> {
            const localVarAxiosArgs = await ContactApiAxiosParamCreator(configuration).updatePropertiesOnContactUsingPATCH(contactId, body, updateMask, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ContactApi - factory interface
 * @export
 */
export const ContactApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Apply a list of tags to a given contact record
         * @summary Apply Tags
         * @param {TagId} body tagIds
         * @param {number} contactId contactId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyTagsToContactIdUsingPOST(body: TagId, contactId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Entrylongstring>>> {
            return ContactApiFp(configuration).applyTagsToContactIdUsingPOST(body, contactId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new contact as the authenticated user. NB: Contact must contain at least one item in `email_addresses` or `phone_numbers` and `country_code` is required if `region` is specified.  Please see the body schema for updates to the postal code field.  You may opt-in or mark a Contact as _Marketable_ by including the following field in the request JSON with an opt-in reason. (This field is also shown in the complete request body sample.) The reason you provide here will help with compliance. Example reasons: \"Customer opted-in through webform\", \"Contact gave explicit permission.\"  ```json \"opt_in_reason\": \"your reason for opt-in\" ``` Note that the email address status will only be updated to unconfirmed (marketable) for email addresses that are currently in the following states: Unengaged Marketable Unengaged Non-Marketable Non-Marketable Opt-Out: Manual All other existing statuses e.g. List Unsubscribe, Opt-Out System etc will remain non-marketable and in their existing state.  This API only supports a subset of valid timezones. A list of the supported timezones can be found [here](https://developer.infusionsoft.com/faqs/what-timezones-do-contact-calls-accept/).
         * @summary Create a Contact
         * @param {CreateOrPatchContact} [body] contact
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContactUsingPOST(body?: CreateOrPatchContact, options?: AxiosRequestConfig): Promise<AxiosResponse<FullContact>> {
            return ContactApiFp(configuration).createContactUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new credit card associated to a contact
         * @summary Create a Credit Card
         * @param {number} contactId contactId
         * @param {CreditCard} [body] creditCard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCreditCardUsingPOST(contactId: number, body?: CreditCard, options?: AxiosRequestConfig): Promise<AxiosResponse<CreditCardAdded>> {
            return ContactApiFp(configuration).createCreditCardUsingPOST(contactId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a custom field of the specified type and options to the Contact object.
         * @summary Create a Custom Field
         * @param {CreateRestCustomField} body customField
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCustomFieldUsingPOST(body: CreateRestCustomField, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomFieldMetaData>> {
            return ContactApiFp(configuration).createCustomFieldUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a record of an email sent to a contact
         * @summary Create an Email Record
         * @param {number} contactId contactId
         * @param {EmailSentCreate} [body] Email records to persist, with content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmailForContactUsingPOST(contactId: number, body?: EmailSentCreate, options?: AxiosRequestConfig): Promise<AxiosResponse<EmailSentCreate>> {
            return ContactApiFp(configuration).createEmailForContactUsingPOST(contactId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new contact or updates a contact as the authenticated user. NB: New Contacts must contain at least one item in `email_addresses` or `phone_numbers` and `country_code` is required if `region` is specified. Existing Contacts are updated with only the values provided in the request. Accepts a `duplicate_option` which performs duplicate checking by one of the following options: `Email`, `EmailAndName`, if a match is found using the option provided, the existing contact will be updated. If an existing contact was not found using the `duplicate_option` provided, a new contact record will be created.  You may opt-in or mark a Contact as _Marketable_ by including the following field in the request JSON with an opt-in reason. (This field is also shown in the complete request body sample.) The reason you provide here will help with compliance. Example reasons: \"Customer opted-in through webform\", \"Contact gave explicit permission.\"  ```json \"opt_in_reason\": \"your reason for opt-in\" ``` Note that the email address status will only be updated to unconfirmed (marketable) for email addresses that are currently in the following states: Unengaged Marketable Unengaged Non-Marketable Non-Marketable Opt-Out: Manual All other existing statuses e.g. List Unsubscribe, Opt-Out System etc will remain non-marketable and in their existing state.  This API only supports a subset of valid timezones. A list of the supported timezones can be found [here](https://developer.infusionsoft.com/faqs/what-timezones-do-contact-calls-accept/).
         * @summary Create or Update a Contact
         * @param {UpsertContact} [body] contact
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrUpdateContactUsingPUT(body?: UpsertContact, options?: AxiosRequestConfig): Promise<AxiosResponse<FullContact>> {
            return ContactApiFp(configuration).createOrUpdateContactUsingPUT(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified contact.
         * @summary Delete a Contact
         * @param {number} contactId contactId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContactUsingDELETE(contactId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ContactApiFp(configuration).deleteContactUsingDELETE(contactId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single contact
         * @summary Retrieve a Contact
         * @param {number} id id
         * @param {Array<string>} [optionalProperties] Comma-delimited list of Contact properties to include in the response. (Some fields such as &#x60;lead_source_id&#x60;, &#x60;custom_fields&#x60;, and &#x60;job_title&#x60; aren&#x27;t included, by default.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContactUsingGET(id: number, optionalProperties?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<FullContact>> {
            return ContactApiFp(configuration).getContactUsingGET(id, optionalProperties, options).then((request) => request(axios, basePath));
        },
        /**
         * Inserts UTMs for the contact specified by the contactId. The authenticated user must have permission to modify the contact utm info
         * @summary Insert UTMs for a Contact
         * @param {number} contactId ID of the contact to insert UTMs for
         * @param {CreateUtmContact} [body] UTM parameters to insert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertUTMsUsingPOST(contactId: number, body?: CreateUtmContact, options?: AxiosRequestConfig): Promise<AxiosResponse<FullUtm>> {
            return ContactApiFp(configuration).insertUTMsUsingPOST(contactId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of tags applied to a given contact
         * @summary List Applied Tags
         * @param {number} contactId contactId
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAppliedTagsUsingGET(contactId: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ContactTagList>> {
            return ContactApiFp(configuration).listAppliedTagsUsingGET(contactId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all contacts
         * @summary List Contacts
         * @param {string} [email] Optional email address to query on
         * @param {string} [familyName] Optional last name or surname to query on
         * @param {string} [givenName] Optional first name or forename to query on
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {Array<string>} [optionalProperties] Comma-delimited list of Contact properties to include in the response. (Some fields such as &#x60;lead_source_id&#x60;, &#x60;custom_fields&#x60;, and &#x60;job_title&#x60; aren&#x27;t included, by default.)
         * @param {string} [order] Attribute to order items by
         * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
         * @param {string} [since] Date to start searching from on LastUpdated ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {string} [until] Date to search to on LastUpdated ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContactsUsingGET(email?: string, familyName?: string, givenName?: string, limit?: number, offset?: number, optionalProperties?: Array<string>, order?: string, orderDirection?: string, since?: string, until?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ContactList>> {
            return ContactApiFp(configuration).listContactsUsingGET(email, familyName, givenName, limit, offset, optionalProperties, order, orderDirection, since, until, options).then((request) => request(axios, basePath));
        },
        /**
         * List all Credit Cards on a contact
         * @summary Retrieve Credit Cards
         * @param {number} contactId contactId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCreditCardsUsingGET(contactId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ContactCreditCard>>> {
            return ContactApiFp(configuration).listCreditCardsUsingGET(contactId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Emails that have been sent to a Contact
         * @summary List Emails
         * @param {number} contactId contactId
         * @param {string} [email] Optional email address to query on
         * @param {number} [limit] Sets a total of items to return
         * @param {number} [offset] Sets a beginning range of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmailsForContactUsingGET(contactId: number, email?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<EmailSentQueryResultList>> {
            return ContactApiFp(configuration).listEmailsForContactUsingGET(contactId, email, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a list of tags from the given contact. Provide one or more tag ids in the querystring as a comma-separated URIencoded list (%2C is a comma). E.g. DELETE /contacts/{contact_id}/tags?ids=1%2C2%2C3
         * @summary Remove Applied Tags
         * @param {number} contactId contactId
         * @param {string} ids ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTagsFromContactUsingDELETE(contactId: number, ids: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ContactApiFp(configuration).removeTagsFromContactUsingDELETE(contactId, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a tag from the given contact
         * @summary Remove Applied Tag
         * @param {number} contactId contactId
         * @param {number} tagId tagId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTagsFromContactUsingDELETE1(contactId: number, tagId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ContactApiFp(configuration).removeTagsFromContactUsingDELETE1(contactId, tagId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the custom fields and optional properties for the Contact object
         * @summary Retrieve Contact Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveContactModelUsingGET(options?: AxiosRequestConfig): Promise<AxiosResponse<ObjectModel>> {
            return ContactApiFp(configuration).retrieveContactModelUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a contact with only the values provided in the request.  You may opt-in or mark a Contact as _Marketable_ by including the following field in the request JSON with an opt-in reason. (This field is also shown in the complete request body sample.) The reason you provide here will help with compliance. Example reasons: \"Customer opted-in through webform\", \"Contact gave explicit permission.\"  ```json \"opt_in_reason\": \"your reason for opt-in\" ``` Note that the email address status will only be updated to unconfirmed (marketable) for email addresses that are currently in the following states: Unengaged Marketable Unengaged Non-Marketable Non-Marketable Opt-Out: Manual All other existing statuses e.g. List Unsubscribe, Opt-Out System etc will remain non-marketable and in their existing state.
         * @summary Update a Contact
         * @param {number} contactId contactId
         * @param {CreateOrPatchContact} [body] contact
         * @param {Array<string>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePropertiesOnContactUsingPATCH(contactId: number, body?: CreateOrPatchContact, updateMask?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<FullContact>> {
            return ContactApiFp(configuration).updatePropertiesOnContactUsingPATCH(contactId, body, updateMask, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContactApi - object-oriented interface
 * @export
 * @class ContactApi
 * @extends {BaseAPI}
 */
export class ContactApi extends BaseAPI {
    /**
     * Apply a list of tags to a given contact record
     * @summary Apply Tags
     * @param {TagId} body tagIds
     * @param {number} contactId contactId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public async applyTagsToContactIdUsingPOST(body: TagId, contactId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Entrylongstring>>> {
        return ContactApiFp(this.configuration).applyTagsToContactIdUsingPOST(body, contactId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new contact as the authenticated user. NB: Contact must contain at least one item in `email_addresses` or `phone_numbers` and `country_code` is required if `region` is specified.  Please see the body schema for updates to the postal code field.  You may opt-in or mark a Contact as _Marketable_ by including the following field in the request JSON with an opt-in reason. (This field is also shown in the complete request body sample.) The reason you provide here will help with compliance. Example reasons: \"Customer opted-in through webform\", \"Contact gave explicit permission.\"  ```json \"opt_in_reason\": \"your reason for opt-in\" ``` Note that the email address status will only be updated to unconfirmed (marketable) for email addresses that are currently in the following states: Unengaged Marketable Unengaged Non-Marketable Non-Marketable Opt-Out: Manual All other existing statuses e.g. List Unsubscribe, Opt-Out System etc will remain non-marketable and in their existing state.  This API only supports a subset of valid timezones. A list of the supported timezones can be found [here](https://developer.infusionsoft.com/faqs/what-timezones-do-contact-calls-accept/).
     * @summary Create a Contact
     * @param {CreateOrPatchContact} [body] contact
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public async createContactUsingPOST(body?: CreateOrPatchContact, options?: AxiosRequestConfig) : Promise<AxiosResponse<FullContact>> {
        return ContactApiFp(this.configuration).createContactUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new credit card associated to a contact
     * @summary Create a Credit Card
     * @param {number} contactId contactId
     * @param {CreditCard} [body] creditCard
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public async createCreditCardUsingPOST(contactId: number, body?: CreditCard, options?: AxiosRequestConfig) : Promise<AxiosResponse<CreditCardAdded>> {
        return ContactApiFp(this.configuration).createCreditCardUsingPOST(contactId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Adds a custom field of the specified type and options to the Contact object.
     * @summary Create a Custom Field
     * @param {CreateRestCustomField} body customField
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public async createCustomFieldUsingPOST(body: CreateRestCustomField, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomFieldMetaData>> {
        return ContactApiFp(this.configuration).createCustomFieldUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a record of an email sent to a contact
     * @summary Create an Email Record
     * @param {number} contactId contactId
     * @param {EmailSentCreate} [body] Email records to persist, with content.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public async createEmailForContactUsingPOST(contactId: number, body?: EmailSentCreate, options?: AxiosRequestConfig) : Promise<AxiosResponse<EmailSentCreate>> {
        return ContactApiFp(this.configuration).createEmailForContactUsingPOST(contactId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new contact or updates a contact as the authenticated user. NB: New Contacts must contain at least one item in `email_addresses` or `phone_numbers` and `country_code` is required if `region` is specified. Existing Contacts are updated with only the values provided in the request. Accepts a `duplicate_option` which performs duplicate checking by one of the following options: `Email`, `EmailAndName`, if a match is found using the option provided, the existing contact will be updated. If an existing contact was not found using the `duplicate_option` provided, a new contact record will be created.  You may opt-in or mark a Contact as _Marketable_ by including the following field in the request JSON with an opt-in reason. (This field is also shown in the complete request body sample.) The reason you provide here will help with compliance. Example reasons: \"Customer opted-in through webform\", \"Contact gave explicit permission.\"  ```json \"opt_in_reason\": \"your reason for opt-in\" ``` Note that the email address status will only be updated to unconfirmed (marketable) for email addresses that are currently in the following states: Unengaged Marketable Unengaged Non-Marketable Non-Marketable Opt-Out: Manual All other existing statuses e.g. List Unsubscribe, Opt-Out System etc will remain non-marketable and in their existing state.  This API only supports a subset of valid timezones. A list of the supported timezones can be found [here](https://developer.infusionsoft.com/faqs/what-timezones-do-contact-calls-accept/).
     * @summary Create or Update a Contact
     * @param {UpsertContact} [body] contact
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public async createOrUpdateContactUsingPUT(body?: UpsertContact, options?: AxiosRequestConfig) : Promise<AxiosResponse<FullContact>> {
        return ContactApiFp(this.configuration).createOrUpdateContactUsingPUT(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes the specified contact.
     * @summary Delete a Contact
     * @param {number} contactId contactId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public async deleteContactUsingDELETE(contactId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ContactApiFp(this.configuration).deleteContactUsingDELETE(contactId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a single contact
     * @summary Retrieve a Contact
     * @param {number} id id
     * @param {Array<string>} [optionalProperties] Comma-delimited list of Contact properties to include in the response. (Some fields such as &#x60;lead_source_id&#x60;, &#x60;custom_fields&#x60;, and &#x60;job_title&#x60; aren&#x27;t included, by default.)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public async getContactUsingGET(id: number, optionalProperties?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<FullContact>> {
        return ContactApiFp(this.configuration).getContactUsingGET(id, optionalProperties, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Inserts UTMs for the contact specified by the contactId. The authenticated user must have permission to modify the contact utm info
     * @summary Insert UTMs for a Contact
     * @param {number} contactId ID of the contact to insert UTMs for
     * @param {CreateUtmContact} [body] UTM parameters to insert
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public async insertUTMsUsingPOST(contactId: number, body?: CreateUtmContact, options?: AxiosRequestConfig) : Promise<AxiosResponse<FullUtm>> {
        return ContactApiFp(this.configuration).insertUTMsUsingPOST(contactId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of tags applied to a given contact
     * @summary List Applied Tags
     * @param {number} contactId contactId
     * @param {number} [limit] Sets a total of items to return
     * @param {number} [offset] Sets a beginning range of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public async listAppliedTagsUsingGET(contactId: number, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ContactTagList>> {
        return ContactApiFp(this.configuration).listAppliedTagsUsingGET(contactId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of all contacts
     * @summary List Contacts
     * @param {string} [email] Optional email address to query on
     * @param {string} [familyName] Optional last name or surname to query on
     * @param {string} [givenName] Optional first name or forename to query on
     * @param {number} [limit] Sets a total of items to return
     * @param {number} [offset] Sets a beginning range of items to return
     * @param {Array<string>} [optionalProperties] Comma-delimited list of Contact properties to include in the response. (Some fields such as &#x60;lead_source_id&#x60;, &#x60;custom_fields&#x60;, and &#x60;job_title&#x60; aren&#x27;t included, by default.)
     * @param {string} [order] Attribute to order items by
     * @param {string} [orderDirection] How to order the data i.e. ascending (A-Z) or descending (Z-A)
     * @param {string} [since] Date to start searching from on LastUpdated ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
     * @param {string} [until] Date to search to on LastUpdated ex. &#x60;2017-01-01T22:17:59.039Z&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public async listContactsUsingGET(email?: string, familyName?: string, givenName?: string, limit?: number, offset?: number, optionalProperties?: Array<string>, order?: string, orderDirection?: string, since?: string, until?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ContactList>> {
        return ContactApiFp(this.configuration).listContactsUsingGET(email, familyName, givenName, limit, offset, optionalProperties, order, orderDirection, since, until, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all Credit Cards on a contact
     * @summary Retrieve Credit Cards
     * @param {number} contactId contactId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public async listCreditCardsUsingGET(contactId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ContactCreditCard>>> {
        return ContactApiFp(this.configuration).listCreditCardsUsingGET(contactId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Emails that have been sent to a Contact
     * @summary List Emails
     * @param {number} contactId contactId
     * @param {string} [email] Optional email address to query on
     * @param {number} [limit] Sets a total of items to return
     * @param {number} [offset] Sets a beginning range of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public async listEmailsForContactUsingGET(contactId: number, email?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<EmailSentQueryResultList>> {
        return ContactApiFp(this.configuration).listEmailsForContactUsingGET(contactId, email, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Removes a list of tags from the given contact. Provide one or more tag ids in the querystring as a comma-separated URIencoded list (%2C is a comma). E.g. DELETE /contacts/{contact_id}/tags?ids=1%2C2%2C3
     * @summary Remove Applied Tags
     * @param {number} contactId contactId
     * @param {string} ids ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public async removeTagsFromContactUsingDELETE(contactId: number, ids: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ContactApiFp(this.configuration).removeTagsFromContactUsingDELETE(contactId, ids, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Removes a tag from the given contact
     * @summary Remove Applied Tag
     * @param {number} contactId contactId
     * @param {number} tagId tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public async removeTagsFromContactUsingDELETE1(contactId: number, tagId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ContactApiFp(this.configuration).removeTagsFromContactUsingDELETE1(contactId, tagId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the custom fields and optional properties for the Contact object
     * @summary Retrieve Contact Model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public async retrieveContactModelUsingGET(options?: AxiosRequestConfig) : Promise<AxiosResponse<ObjectModel>> {
        return ContactApiFp(this.configuration).retrieveContactModelUsingGET(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a contact with only the values provided in the request.  You may opt-in or mark a Contact as _Marketable_ by including the following field in the request JSON with an opt-in reason. (This field is also shown in the complete request body sample.) The reason you provide here will help with compliance. Example reasons: \"Customer opted-in through webform\", \"Contact gave explicit permission.\"  ```json \"opt_in_reason\": \"your reason for opt-in\" ``` Note that the email address status will only be updated to unconfirmed (marketable) for email addresses that are currently in the following states: Unengaged Marketable Unengaged Non-Marketable Non-Marketable Opt-Out: Manual All other existing statuses e.g. List Unsubscribe, Opt-Out System etc will remain non-marketable and in their existing state.
     * @summary Update a Contact
     * @param {number} contactId contactId
     * @param {CreateOrPatchContact} [body] contact
     * @param {Array<string>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public async updatePropertiesOnContactUsingPATCH(contactId: number, body?: CreateOrPatchContact, updateMask?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<FullContact>> {
        return ContactApiFp(this.configuration).updatePropertiesOnContactUsingPATCH(contactId, body, updateMask, options).then((request) => request(this.axios, this.basePath));
    }
}
